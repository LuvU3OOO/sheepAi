var Rt = Object.defineProperty;
var Pt = (e, o, l) => o in e ? Rt(e, o, { enumerable: !0, configurable: !0, writable: !0, value: l }) : e[o] = l;
var U = (e, o, l) => (Pt(e, typeof o != "symbol" ? o + "" : o, l), l);
import { defineComponent as W, createVNode as t, inject as I, ref as P, onMounted as Q, reactive as G, computed as we, watch as H, nextTick as ve, Fragment as It, cloneVNode as gt, toRef as te, shallowRef as Wt, onBeforeUnmount as Dt } from "vue";
import { p as n, e as J, n as zt, b as qt, M as fe, d as Ut } from "./chunks/config.mjs";
import { draggingScroll as _t, linkTo as Gt, debounce as Kt, createSmoothScroll as jt, throttle as Zt } from "@vavt/util";
import { a as se, D as Xt } from "./chunks/index2.mjs";
import { b, i as Yt, E as le, U as xe, j as Jt, k as Te, h as x, c as Qt, O as Et, l as Ht, m as Nt } from "./chunks/index4.mjs";
import { a as el } from "./chunks/dom.mjs";
import { M as Bt, I as T } from "./chunks/index3.mjs";
import { EditorView as he } from "codemirror";
import { EditorView as Se, placeholder as tl, keymap as ll } from "@codemirror/view";
import { languages as ol } from "@codemirror/language-data";
import { markdown as al } from "@codemirror/lang-markdown";
import { EditorSelection as _, EditorState as Ce, Compartment as ce, StateEffect as nl } from "@codemirror/state";
import { deleteLine as il, defaultKeymap as rl, historyKeymap as sl, indentWithTab as cl, history as ft, undo as ul, redo as dl } from "@codemirror/commands";
import { HighlightStyle as Ot, syntaxHighlighting as Vt, indentUnit as ml } from "@codemirror/language";
import { tags as c } from "@lezer/highlight";
import { autocompletion as gl } from "@codemirror/autocomplete";
import { c as fl, C as hl, e as bl, a as vl, u as kl, b as Cl, d as $l, f as pl, g as yl, h as Tl, i as wl, M as xl } from "./chunks/index.mjs";
import Ft from "./MdCatalog.mjs";
import { g as ht } from "./chunks/vue-tsx.mjs";
import Sl from "./NormalToolbar.mjs";
import Ml from "./ModalToolbar.mjs";
import "medium-zoom";
import "copy-to-clipboard";
import "markdown-it";
import "markdown-it-image-figures";
import "markdown-it-task-lists";
import "lru-cache";
const Al = /* @__PURE__ */ W({
  setup() {
    return () => t("div", {
      class: `${n}-divider`
    }, null);
  }
}), Ll = {
  noPrettier: {
    type: Boolean
  },
  // 工具栏选择显示
  toolbars: {
    type: Array,
    default: () => []
  },
  // 工具栏选择不显示
  toolbarsExclude: {
    type: Array,
    default: () => []
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  screenfull: {
    type: Object,
    default: null
  },
  screenfullJs: {
    type: String,
    default: ""
  },
  updateSetting: {
    type: Function,
    default: () => {
    }
  },
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  defToolbars: {
    type: Object
  },
  noUploadImg: {
    type: Boolean
  },
  /**
   * 是否在工具栏下面显示对应的文字名称
   *
   * @default false
   */
  showToolbarName: {
    type: Boolean
  }
}, Il = (e) => {
  var d, s, g, p;
  const o = I("editorId");
  let l = (s = (d = J.editorExtensions) == null ? void 0 : d.screenfull) == null ? void 0 : s.instance;
  const a = (p = (g = J.editorExtensions) == null ? void 0 : g.screenfull) == null ? void 0 : p.js, r = P(!1), i = (k) => {
    if (!l) {
      b.emit(o, le, {
        name: "fullscreen",
        message: "fullscreen is undefined"
      });
      return;
    }
    l.isEnabled ? (r.value = !0, (k === void 0 ? !l.isFullscreen : k) ? l.request() : l.exit()) : console.error("browser does not support screenfull!");
  }, h = () => {
    l && l.isEnabled && l.on("change", () => {
      (r.value || e.setting.fullscreen) && (r.value = !1, e.updateSetting("fullscreen"));
    });
  }, f = () => {
    l = window.screenfull, h();
  };
  return Q(() => {
    if (h(), !l) {
      const k = document.createElement("script");
      k.src = a || zt, k.onload = f, k.id = `${n}-screenfull`, el(k, "screenfull");
    }
  }), Q(() => {
    b.on(o, {
      name: Yt,
      callback: i
    });
  }), { fullscreenHandler: i };
}, Dl = {
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  onSelected: {
    type: Function,
    default: () => {
    }
  }
}, El = /* @__PURE__ */ W({
  name: "TableShape",
  props: Dl,
  setup(e) {
    const o = G({
      x: -1,
      y: -1
    });
    return () => t("div", {
      class: `${n}-table-shape`,
      onMouseleave: () => {
        o.x = -1, o.y = -1;
      }
    }, [new Array(e.tableShape[1]).fill("").map((l, a) => t("div", {
      class: `${n}-table-shape-row`,
      key: `table-shape-row-${a}`
    }, [new Array(e.tableShape[0]).fill("").map((r, i) => t("div", {
      class: `${n}-table-shape-col`,
      key: `table-shape-col-${i}`,
      onMouseenter: () => {
        o.x = a, o.y = i;
      },
      onClick: () => {
        e.onSelected(o);
      }
    }, [t("div", {
      class: [`${n}-table-shape-col-default`, a <= o.x && i <= o.y && `${n}-table-shape-col-include`]
    }, null)]))]))]);
  }
}), Hl = El, Nl = {
  type: {
    type: String,
    default: "link"
  },
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Bl = /* @__PURE__ */ W({
  props: Nl,
  setup(e) {
    const o = I("usedLanguageText"), l = I("editorId"), a = we(() => {
      var i, h;
      switch (e.type) {
        case "link":
          return (i = o.value.linkModalTips) == null ? void 0 : i.linkTitle;
        case "image":
          return (h = o.value.linkModalTips) == null ? void 0 : h.imageTitle;
        default:
          return "";
      }
    }), r = G({
      desc: "",
      url: ""
    });
    return H(() => e.visible, (i) => {
      i || setTimeout(() => {
        r.desc = "", r.url = "";
      }, 200);
    }), () => t(Bt, {
      title: a.value,
      visible: e.visible,
      onClose: e.onCancel
    }, {
      default: () => {
        var i, h, f, d, s;
        return [t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-desc-${l}`
        }, [(i = o.value.linkModalTips) == null ? void 0 : i.descLabel]), t("input", {
          placeholder: (h = o.value.linkModalTips) == null ? void 0 : h.descLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-desc-${l}`,
          type: "text",
          value: r.desc,
          onChange: (g) => {
            r.desc = g.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("label", {
          class: `${n}-label`,
          for: `link-url-${l}`
        }, [(f = o.value.linkModalTips) == null ? void 0 : f.urlLabel]), t("input", {
          placeholder: (d = o.value.linkModalTips) == null ? void 0 : d.urlLabelPlaceHolder,
          class: `${n}-input`,
          id: `link-url-${l}`,
          type: "text",
          value: r.url,
          onChange: (g) => {
            r.url = g.target.value;
          },
          autocomplete: "off"
        }, null)]), t("div", {
          class: `${n}-form-item`
        }, [t("button", {
          class: [`${n}-btn`, `${n}-btn-row`],
          type: "button",
          onClick: () => {
            e.onOk(r), r.desc = "", r.url = "";
          }
        }, [(s = o.value.linkModalTips) == null ? void 0 : s.buttonOK])])];
      }
    });
  }
}), Ol = {
  visible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Vl = /* @__PURE__ */ W({
  props: Ol,
  setup(e) {
    var g, p, k;
    const o = I("usedLanguageText"), l = I("editorId");
    let a = (k = (p = (g = J) == null ? void 0 : g.editorExtensions) == null ? void 0 : p.cropper) == null ? void 0 : k.instance;
    const r = P(), i = P(), h = P(), f = G({
      cropperInited: !1,
      imgSelected: !1,
      imgSrc: "",
      // 是否全屏
      isFullscreen: !1
    });
    let d = null;
    H(() => e.visible, () => {
      e.visible && !f.cropperInited && (a = a || window.Cropper, r.value.onchange = () => {
        if (!a) {
          b.emit(l, le, {
            name: "Cropper",
            message: "Cropper is undefined"
          });
          return;
        }
        const $ = r.value.files || [];
        if (f.imgSelected = !0, ($ == null ? void 0 : $.length) > 0) {
          const m = new FileReader();
          m.onload = (v) => {
            f.imgSrc = v.target.result, ve(() => {
              d = new a(i.value, {
                viewMode: 2,
                preview: `.${n}-clip-preview-target`
                // aspectRatio: 16 / 9,
              });
            });
          }, m.readAsDataURL($[0]);
        }
      });
    }), H(() => [f.imgSelected], () => {
      h.value.style = "";
    }), H(() => f.isFullscreen, () => {
      ve(() => {
        d == null || d.destroy(), h.value.style = "", i.value && (d = new a(i.value, {
          viewMode: 2,
          preview: `.${n}-clip-preview-target`
          // aspectRatio: 16 / 9,
        }));
      });
    });
    const s = () => {
      d.clear(), d.destroy(), d = null, r.value.value = "", f.imgSelected = !1;
    };
    return () => {
      var $;
      return t(Bt, {
        class: `${n}-modal-clip`,
        title: ($ = o.value.clipModalTips) == null ? void 0 : $.title,
        visible: e.visible,
        onClose: e.onCancel,
        showAdjust: !0,
        isFullscreen: f.isFullscreen,
        onAdjust: (m) => {
          f.isFullscreen = m;
        },
        width: "668px",
        height: "421px"
      }, {
        default: () => {
          var m, v;
          return [t("div", {
            class: `${n}-form-item ${n}-clip`
          }, [t("div", {
            class: `${n}-clip-main`
          }, [f.imgSelected ? t("div", {
            class: `${n}-clip-cropper`
          }, [t("img", {
            src: f.imgSrc,
            ref: i,
            style: {
              display: "none"
            },
            alt: ""
          }, null), t("div", {
            class: `${n}-clip-delete`,
            onClick: s
          }, [t(T, {
            name: "delete"
          }, null)])]) : t("div", {
            class: `${n}-clip-upload`,
            onClick: () => {
              r.value.click();
            }
          }, [t(T, {
            name: "upload"
          }, null)])]), t("div", {
            class: `${n}-clip-preview`
          }, [t("div", {
            class: `${n}-clip-preview-target`,
            ref: h
          }, null)])]), t("div", {
            class: `${n}-form-item`
          }, [t("button", {
            class: `${n}-btn`,
            type: "button",
            onClick: () => {
              if (d) {
                const u = d.getCroppedCanvas();
                b.emit(l, xe, [Jt(u.toDataURL("image/png"))], e.onOk), s();
              }
            }
          }, [((m = o.value.clipModalTips) == null ? void 0 : m.buttonUpload) || ((v = o.value.linkModalTips) == null ? void 0 : v.buttonOK)])]), t("input", {
            ref: r,
            accept: "image/*",
            type: "file",
            multiple: !1,
            style: {
              display: "none"
            }
          }, null)];
        }
      });
    };
  }
}), Fl = {
  type: {
    type: String,
    default: "link"
  },
  linkVisible: {
    type: Boolean,
    default: !1
  },
  clipVisible: {
    type: Boolean,
    default: !1
  },
  onCancel: {
    type: Function,
    default: () => {
    }
  },
  onOk: {
    type: Function,
    default: () => {
    }
  }
}, Rl = /* @__PURE__ */ W({
  props: Fl,
  setup(e) {
    return () => t(It, null, [t(Bl, {
      type: e.type,
      visible: e.linkVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null), t(Vl, {
      visible: e.clipVisible,
      onOk: e.onOk,
      onCancel: e.onCancel
    }, null)]);
  }
}), Pl = /* @__PURE__ */ W({
  name: "MDEditorToolbar",
  props: Ll,
  setup(e) {
    const o = I("editorId"), l = I("usedLanguageText"), a = I("theme"), r = I("language"), {
      fullscreenHandler: i
    } = Il(e), h = `${o}-toolbar-wrapper`, f = P(), d = G({
      title: !1,
      catalog: !1,
      // 图片上传下拉
      image: !1,
      // 表格预选
      table: !1,
      // mermaid
      mermaid: !1,
      katex: !1
    }), s = (u, C) => {
      b.emit(o, x, u, C);
    }, g = G({
      type: "link",
      linkVisible: !1,
      clipVisible: !1
    }), p = P();
    Q(() => {
      b.on(o, {
        name: Te,
        callback(u) {
          g.type = u, g.linkVisible = !0;
        }
      });
    });
    const k = we(() => {
      const u = e.toolbars.filter((M) => !e.toolbarsExclude.includes(M)), C = u.indexOf("="), w = C === -1 ? u : u.slice(0, C + 1), S = C === -1 ? [] : u.slice(C, Number.MAX_SAFE_INTEGER);
      return [w, S];
    }), $ = P(), m = () => {
      b.emit(o, xe, Array.from($.value.files || [])), $.value.value = "";
    };
    Q(() => {
      $.value.addEventListener("change", m);
    });
    const v = (u) => {
      var C, w, S, M, D, oe, ae, A, L, q, z, O, N, B, V, K, j, me, ne, Y, Z, ie, X, F, R, re, ge, Me, Ae, Le, Ie, De, Ee, He, Ne, Be, Oe, Ve, Fe, Re, Pe, We, ze, qe, Ue, _e, Ge, Ke, je, Ze, Xe, Ye, Je, Qe, et, tt, lt, ot, at, nt, it, rt, st, ct, ut, dt, mt;
      if (qt.includes(u))
        switch (u) {
          case "-":
            return t(Al, null, null);
          case "bold":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (C = l.value.toolbarTips) == null ? void 0 : C.bold,
              onClick: () => {
                s("bold");
              }
            }, [t(T, {
              name: "bold"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(w = l.value.toolbarTips) == null ? void 0 : w.bold])]);
          case "underline":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (S = l.value.toolbarTips) == null ? void 0 : S.underline,
              onClick: () => {
                s("underline");
              }
            }, [t(T, {
              name: "underline"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(M = l.value.toolbarTips) == null ? void 0 : M.underline])]);
          case "italic":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (D = l.value.toolbarTips) == null ? void 0 : D.italic,
              onClick: () => {
                s("italic");
              }
            }, [t(T, {
              name: "italic"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(oe = l.value.toolbarTips) == null ? void 0 : oe.italic])]);
          case "strikeThrough":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ae = l.value.toolbarTips) == null ? void 0 : ae.strikeThrough,
              onClick: () => {
                s("strikeThrough");
              }
            }, [t(T, {
              name: "strike-through"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(A = l.value.toolbarTips) == null ? void 0 : A.strikeThrough])]);
          case "title":
            return t(se, {
              relative: `#${h}`,
              visible: d.title,
              onChange: (y) => {
                d.title = y;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  d.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h1");
                }
              }, [(L = l.value.titleItem) == null ? void 0 : L.h1]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h2");
                }
              }, [(q = l.value.titleItem) == null ? void 0 : q.h2]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h3");
                }
              }, [(z = l.value.titleItem) == null ? void 0 : z.h3]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h4");
                }
              }, [(O = l.value.titleItem) == null ? void 0 : O.h4]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h5");
                }
              }, [(N = l.value.titleItem) == null ? void 0 : N.h5]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-title`,
                onClick: () => {
                  s("h6");
                }
              }, [(B = l.value.titleItem) == null ? void 0 : B.h6])])
            }, {
              default: () => {
                var y, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (y = l.value.toolbarTips) == null ? void 0 : y.title
                }, [t(T, {
                  name: "title"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.title])])];
              }
            });
          case "sub":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (V = l.value.toolbarTips) == null ? void 0 : V.sub,
              onClick: () => {
                s("sub");
              }
            }, [t(T, {
              name: "sub"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(K = l.value.toolbarTips) == null ? void 0 : K.sub])]);
          case "sup":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (j = l.value.toolbarTips) == null ? void 0 : j.sup,
              onClick: () => {
                s("sup");
              }
            }, [t(T, {
              name: "sup"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(me = l.value.toolbarTips) == null ? void 0 : me.sup])]);
          case "quote":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ne = l.value.toolbarTips) == null ? void 0 : ne.quote,
              onClick: () => {
                s("quote");
              }
            }, [t(T, {
              name: "quote"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Y = l.value.toolbarTips) == null ? void 0 : Y.quote])]);
          case "unorderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Z = l.value.toolbarTips) == null ? void 0 : Z.unorderedList,
              onClick: () => {
                s("unorderedList");
              }
            }, [t(T, {
              name: "unordered-list"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(ie = l.value.toolbarTips) == null ? void 0 : ie.unorderedList])]);
          case "orderedList":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (X = l.value.toolbarTips) == null ? void 0 : X.orderedList,
              onClick: () => {
                s("orderedList");
              }
            }, [t(T, {
              name: "ordered-list"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(F = l.value.toolbarTips) == null ? void 0 : F.orderedList])]);
          case "task":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (R = l.value.toolbarTips) == null ? void 0 : R.task,
              onClick: () => {
                s("task");
              }
            }, [t(T, {
              name: "task"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(re = l.value.toolbarTips) == null ? void 0 : re.task])]);
          case "codeRow":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (ge = l.value.toolbarTips) == null ? void 0 : ge.codeRow,
              onClick: () => {
                s("codeRow");
              }
            }, [t(T, {
              name: "code-row"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Me = l.value.toolbarTips) == null ? void 0 : Me.codeRow])]);
          case "code":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ae = l.value.toolbarTips) == null ? void 0 : Ae.code,
              onClick: () => {
                s("code");
              }
            }, [t(T, {
              name: "code"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Le = l.value.toolbarTips) == null ? void 0 : Le.code])]);
          case "link":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ie = l.value.toolbarTips) == null ? void 0 : Ie.link,
              onClick: () => {
                g.type = "link", g.linkVisible = !0;
              }
            }, [t(T, {
              name: "link"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(De = l.value.toolbarTips) == null ? void 0 : De.link])]);
          case "image":
            return e.noUploadImg ? t("div", {
              class: `${n}-toolbar-item`,
              title: (Ee = l.value.toolbarTips) == null ? void 0 : Ee.image,
              onClick: () => {
                g.type = "image", g.linkVisible = !0;
              }
            }, [t(T, {
              name: "image"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(He = l.value.toolbarTips) == null ? void 0 : He.image])]) : t(se, {
              relative: `#${h}`,
              visible: d.image,
              onChange: (y) => {
                d.image = y;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  d.title = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  g.type = "image", g.linkVisible = !0;
                }
              }, [(Ne = l.value.imgTitleItem) == null ? void 0 : Ne.link]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  $.value.click();
                }
              }, [(Be = l.value.imgTitleItem) == null ? void 0 : Be.upload]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-image`,
                onClick: () => {
                  g.clipVisible = !0;
                }
              }, [(Oe = l.value.imgTitleItem) == null ? void 0 : Oe.clip2upload])])
            }, {
              default: () => {
                var y, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (y = l.value.toolbarTips) == null ? void 0 : y.image
                }, [t(T, {
                  name: "image"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.image])])];
              }
            });
          case "table":
            return t(se, {
              relative: `#${h}`,
              visible: d.table,
              onChange: (y) => {
                d.table = y;
              },
              key: "bar-table",
              overlay: t(Hl, {
                tableShape: e.tableShape,
                onSelected: (y) => {
                  s("table", {
                    selectedShape: y
                  });
                }
              }, null)
            }, {
              default: () => {
                var y, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (y = l.value.toolbarTips) == null ? void 0 : y.table
                }, [t(T, {
                  name: "table"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.table])])];
              }
            });
          case "revoke":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ve = l.value.toolbarTips) == null ? void 0 : Ve.revoke,
              onClick: () => {
                b.emit(o, Nt);
              }
            }, [t(T, {
              name: "revoke"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Fe = l.value.toolbarTips) == null ? void 0 : Fe.revoke])]);
          case "next":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Re = l.value.toolbarTips) == null ? void 0 : Re.next,
              onClick: () => {
                b.emit(o, Ht);
              }
            }, [t(T, {
              name: "next"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Pe = l.value.toolbarTips) == null ? void 0 : Pe.next])]);
          case "save":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (We = l.value.toolbarTips) == null ? void 0 : We.save,
              onClick: () => {
                b.emit(o, Et);
              }
            }, [t(T, {
              name: "baocun"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(ze = l.value.toolbarTips) == null ? void 0 : ze.save])]);
          case "prettier":
            return e.noPrettier ? "" : t("div", {
              class: `${n}-toolbar-item`,
              title: (qe = l.value.toolbarTips) == null ? void 0 : qe.prettier,
              onClick: () => {
                s("prettier");
              }
            }, [t(T, {
              name: "prettier"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Ue = l.value.toolbarTips) == null ? void 0 : Ue.prettier])]);
          case "pageFullscreen":
            return !e.setting.fullscreen && t("div", {
              class: `${n}-toolbar-item`,
              title: (_e = l.value.toolbarTips) == null ? void 0 : _e.pageFullscreen,
              onClick: () => {
                e.updateSetting("pageFullscreen");
              }
            }, [t(T, {
              name: e.setting.pageFullscreen ? "suoxiao" : "fangda"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Ge = l.value.toolbarTips) == null ? void 0 : Ge.pageFullscreen])]);
          case "fullscreen":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ke = l.value.toolbarTips) == null ? void 0 : Ke.fullscreen,
              onClick: () => {
                i();
              }
            }, [t(T, {
              name: e.setting.fullscreen ? "fullscreen-exit" : "fullscreen"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(je = l.value.toolbarTips) == null ? void 0 : je.fullscreen])]);
          case "preview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ze = l.value.toolbarTips) == null ? void 0 : Ze.preview,
              onClick: () => {
                e.updateSetting("preview");
              }
            }, [t(T, {
              name: "preview"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Xe = l.value.toolbarTips) == null ? void 0 : Xe.preview])]);
          case "htmlPreview":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Ye = l.value.toolbarTips) == null ? void 0 : Ye.htmlPreview,
              onClick: () => {
                e.updateSetting("htmlPreview");
              }
            }, [t(T, {
              name: "coding"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(Je = l.value.toolbarTips) == null ? void 0 : Je.htmlPreview])]);
          case "catalog":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (Qe = l.value.toolbarTips) == null ? void 0 : Qe.catalog,
              onClick: () => {
                b.emit(o, Qt);
              },
              key: "bar-catalog"
            }, [t(T, {
              name: "catalog"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(et = l.value.toolbarTips) == null ? void 0 : et.catalog])]);
          case "github":
            return t("div", {
              class: `${n}-toolbar-item`,
              title: (tt = l.value.toolbarTips) == null ? void 0 : tt.github,
              onClick: () => Gt("https://github.com/imzbf/md-editor-v3")
            }, [t(T, {
              name: "github"
            }, null), e.showToolbarName && t("div", {
              class: `${n}-toolbar-item-name`
            }, [(lt = l.value.toolbarTips) == null ? void 0 : lt.github])]);
          case "mermaid":
            return t(se, {
              relative: `#${h}`,
              visible: d.mermaid,
              onChange: (y) => {
                d.mermaid = y;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  d.mermaid = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("flow");
                }
              }, [(ot = l.value.mermaid) == null ? void 0 : ot.flow]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("sequence");
                }
              }, [(at = l.value.mermaid) == null ? void 0 : at.sequence]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("gantt");
                }
              }, [(nt = l.value.mermaid) == null ? void 0 : nt.gantt]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("class");
                }
              }, [(it = l.value.mermaid) == null ? void 0 : it.class]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("state");
                }
              }, [(rt = l.value.mermaid) == null ? void 0 : rt.state]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("pie");
                }
              }, [(st = l.value.mermaid) == null ? void 0 : st.pie]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("relationship");
                }
              }, [(ct = l.value.mermaid) == null ? void 0 : ct.relationship]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-mermaid`,
                onClick: () => {
                  s("journey");
                }
              }, [(ut = l.value.mermaid) == null ? void 0 : ut.journey])]),
              key: "bar-mermaid"
            }, {
              default: () => {
                var y, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (y = l.value.toolbarTips) == null ? void 0 : y.mermaid
                }, [t(T, {
                  name: "mermaid"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.mermaid])])];
              }
            });
          case "katex":
            return t(se, {
              relative: `#${h}`,
              visible: d.katex,
              onChange: (y) => {
                d.katex = y;
              },
              overlay: t("ul", {
                class: `${n}-menu`,
                onClick: () => {
                  d.katex = !1;
                }
              }, [t("li", {
                class: `${n}-menu-item ${n}-menu-item-katex`,
                onClick: () => {
                  s("katexInline");
                }
              }, [(dt = l.value.katex) == null ? void 0 : dt.inline]), t("li", {
                class: `${n}-menu-item ${n}-menu-item-katex`,
                onClick: () => {
                  s("katexBlock");
                }
              }, [(mt = l.value.katex) == null ? void 0 : mt.block])]),
              key: "bar-katex"
            }, {
              default: () => {
                var y, E;
                return [t("div", {
                  class: `${n}-toolbar-item`,
                  title: (y = l.value.toolbarTips) == null ? void 0 : y.katex
                }, [t(T, {
                  name: "formula"
                }, null), e.showToolbarName && t("div", {
                  class: `${n}-toolbar-item-name`
                }, [(E = l.value.toolbarTips) == null ? void 0 : E.katex])])];
              }
            });
        }
      else if (e.defToolbars instanceof Array) {
        const y = e.defToolbars[u];
        return y ? gt(y, {
          theme: a.value,
          language: r.value,
          insert(ke) {
            b.emit(o, x, "universal", {
              generate: ke
            });
          }
        }) : "";
      } else if (e.defToolbars && e.defToolbars.children instanceof Array) {
        const y = e.defToolbars.children[u];
        return y ? gt(y, {
          theme: a.value,
          language: r.value,
          insert(ke) {
            b.emit(o, x, "universal", {
              generate: ke
            });
          }
        }) : "";
      } else
        return "";
    };
    return H(() => e.toolbars, () => {
      ve(() => {
        f.value && _t(f.value);
      });
    }, {
      immediate: !0
    }), () => {
      const u = k.value[0].map((w) => v(w)), C = k.value[1].map((w) => v(w));
      return t(It, null, [e.toolbars.length > 0 && t("div", {
        class: `${n}-toolbar-wrapper`,
        ref: f,
        id: h
      }, [t("div", {
        class: [`${n}-toolbar`, e.showToolbarName && `${n}-stn`]
      }, [t("div", {
        class: `${n}-toolbar-left`,
        ref: p
      }, [u]), t("div", {
        class: `${n}-toolbar-right`
      }, [C])])]), t("input", {
        ref: $,
        accept: "image/*",
        type: "file",
        multiple: !0,
        style: {
          display: "none"
        }
      }, null), t(Rl, {
        linkVisible: g.linkVisible,
        clipVisible: g.clipVisible,
        type: g.type,
        onCancel: () => {
          g.linkVisible = !1, g.clipVisible = !1;
        },
        onOk: (w) => {
          w && s(g.type, {
            desc: w.desc,
            url: w.url
          }), g.linkVisible = !1, g.clipVisible = !1;
        }
      }, null)]);
    };
  }
}), Wl = (e, o) => {
  const l = Kt(() => {
    e.removeEventListener("scroll", a), e.addEventListener("scroll", a), o.removeEventListener("scroll", a), o.addEventListener("scroll", a);
  }, 50), a = (r) => {
    const i = e.clientHeight, h = o.clientHeight, f = e.scrollHeight, d = o.scrollHeight, s = (f - i) / (d - h);
    r.target === e ? (o.removeEventListener("scroll", a), o.scrollTo({
      top: e.scrollTop / s
      // behavior: 'smooth'
    }), l()) : (e.removeEventListener("scroll", a), e.scrollTo({
      top: o.scrollTop * s
      // behavior: 'smooth'
    }), l());
  };
  return [
    () => {
      l().finally(() => {
        e.dispatchEvent(new Event("scroll"));
      });
    },
    () => {
      e.removeEventListener("scroll", a), o.removeEventListener("scroll", a);
    }
  ];
}, zl = (e, o, l) => {
  const { view: a } = l, r = jt(), i = (k) => a.lineBlockAt(a.state.doc.line(k).from).top, h = (k) => a.lineBlockAt(a.state.doc.line(k).from).height;
  let f = [];
  const d = () => {
    f = [];
    const k = Array.from(o.querySelectorAll("[data-line]")).map(
      (u) => Number(u.dataset.line) + 1
    ), { lines: $ } = a.state.doc;
    let m = 1, v = k.shift() ?? $;
    for (let u = 1; u <= $; u++)
      u === v && (m = u, v = k.shift() || $ + 1), f.push({
        start: m,
        end: v - 1
      });
  };
  let s = 0, g = 0;
  const p = Zt((k) => {
    var C, w, S, M, D, oe, ae;
    if (!((C = o.firstElementChild) != null && C.firstElementChild))
      return;
    const $ = a.lineBlockAtHeight(a.scrollDOM.scrollTop), { number: m } = a.state.doc.lineAt($.from);
    if (m > f.length || a.state.doc.lines < f[f.length - 1].end)
      return;
    let v = +getComputedStyle(o).paddingTop.replace("px", "");
    const u = +getComputedStyle(o).paddingBottom.replace("px", "");
    if (k.target === e) {
      if (g !== 0)
        return;
      s++;
      const A = f[m - 1];
      let L = i(A.end) + h(A.end), q = 0;
      const z = i(A.start), O = o.querySelector(`[data-line="${A.start - 1}"]`) || ((w = o.firstElementChild) == null ? void 0 : w.firstElementChild), N = o.querySelector(`[data-line="${A.end}"]`) || ((S = o.lastElementChild) == null ? void 0 : S.lastElementChild);
      let B = 0, V = 0;
      z === 0 ? O === N ? (v = 0, L = a.contentDOM.offsetHeight - a.scrollDOM.offsetHeight, q = a.scrollDOM.scrollTop / L, B = N.offsetTop + N.offsetHeight - o.clientHeight) : (q = a.scrollDOM.scrollTop / L, B = N.offsetTop) : L > a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight ? (q = (a.scrollDOM.scrollTop - z) / (a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight - z), V = O.offsetTop, B = o.scrollHeight - o.clientHeight - V + 10) : (q = (a.scrollDOM.scrollTop - z) / (L - z), V = O.offsetTop, B = N.offsetTop - V);
      const K = V - v + B * q;
      r(o, K, () => {
        s--;
      });
    } else {
      if (s !== 0)
        return;
      g++;
      const A = Array.from(
        o.querySelectorAll("[data-line]")
      ), L = o.scrollTop, q = o.scrollHeight;
      let z = A.length === 0 ? 1 : Math.ceil(
        Number(A[A.length - 1].dataset.line) * (L / q)
      ), O = (M = o.firstElementChild) == null ? void 0 : M.firstElementChild;
      for (let F = z; F >= 0; F--) {
        const R = o.querySelector(`[data-line="${F}"]`);
        if (R && R.offsetTop <= L) {
          O = R, z = F;
          break;
        }
      }
      let N = (D = o.firstElementChild) == null ? void 0 : D.firstElementChild, B = (oe = o.firstElementChild) == null ? void 0 : oe.lastElementChild;
      for (; A.length > 0; ) {
        const F = A.indexOf(O);
        if (F + 1 >= A.length)
          break;
        const R = A[F + 1];
        if (F === -1) {
          B = R;
          break;
        }
        const re = O.offsetTop;
        if (re > L) {
          if (F === 0) {
            N = O, B = R;
            break;
          }
          O = A[F - 1];
          continue;
        }
        const ge = R.offsetTop;
        if (re <= L && ge > L) {
          N = O, B = R;
          break;
        }
        O = R;
      }
      const V = N.offsetTop;
      let K = B.offsetTop, j = 0;
      const { start: me, end: ne } = f[Number(N.dataset.line || 0)], Y = i(me);
      let Z = i(ne);
      const ie = h(ne);
      let X = 0;
      N === ((ae = o.firstElementChild) == null ? void 0 : ae.firstElementChild) ? (N === B ? (K = B.offsetHeight - o.offsetHeight + v + u, X = a.contentDOM.offsetHeight - a.scrollDOM.offsetHeight) : X = Z + ie - Y, j = Math.max(L / K, 0)) : Z > a.scrollDOM.scrollHeight - a.scrollDOM.clientHeight ? (j = Math.max(
        (L - V) / (o.scrollHeight - V - o.clientHeight),
        0
      ), Z = i(a.state.doc.lines) + h(a.state.doc.lines), X = 8 + Z - Y - e.clientHeight) : (j = Math.max(
        (L - V) / (K - V),
        0
      ), X = Z + ie - Y), r(e, Y + X * j, () => {
        g--;
      });
    }
  }, 10);
  return [
    () => {
      d(), e.addEventListener("scroll", p), o.addEventListener("scroll", p), e.dispatchEvent(new Event("scroll"));
    },
    () => {
      f = [], e.removeEventListener("scroll", p), o.removeEventListener("scroll", p);
    }
  ];
}, ql = (e, o, l) => {
  const a = I("editorId");
  let r = () => {
  }, i = () => {
  };
  const h = () => {
    r();
    const f = document.querySelector(
      `#${a} .cm-scroller`
    ), d = document.querySelector(
      `[id="${a}-preview-wrapper"][data-show="true"]`
    ), s = document.querySelector(
      `[id="${a}-html-wrapper"][data-show="true"]`
    );
    (d || s) && ([i, r] = (d ? zl : Wl)(
      f,
      d || s,
      l.value
    )), e.scrollAuto && i();
  };
  H(
    [
      o,
      te(e.setting, "preview"),
      te(e.setting, "htmlPreview"),
      te(e.setting, "fullscreen"),
      te(e.setting, "pageFullscreen")
    ],
    () => {
      ve(h);
    }
  ), H(
    () => e.scrollAuto,
    (f) => {
      f ? i() : r();
    }
  ), Q(h);
}, Ul = ql, _l = (e, o, l) => {
  var g, p, k, $, m, v;
  let a = "", r = 0, i = 0, h = !0, f = !1;
  const d = o.getSelectedText(), s = (g = J.editorConfig) == null ? void 0 : g.mermaidTemplate;
  if (/^h[1-6]{1}$/.test(e)) {
    const u = e.replace(/^h(\d)/, (C, w) => new Array(Number(w)).fill("#", 0, w).join(""));
    a = `${u} ${d}`, r = u.length + 1;
  } else if (e === "prettier") {
    const u = window.prettier || ((k = (p = J.editorExtensions) == null ? void 0 : p.prettier) == null ? void 0 : k.prettierInstance), C = [
      (($ = window.prettierPlugins) == null ? void 0 : $.markdown) || ((v = (m = J.editorExtensions) == null ? void 0 : m.prettier) == null ? void 0 : v.parserMarkdownInstance)
    ];
    !u || C[0] === void 0 ? (b.emit(l.editorId, le, {
      name: "prettier",
      message: "prettier is undefined"
    }), a = o.getValue()) : a = u.format(o.getValue(), {
      parser: "markdown",
      plugins: C
    }), h = !1, f = !0;
  } else
    switch (e) {
      case "bold": {
        a = `**${d}**`, r = 2, i = -2;
        break;
      }
      case "underline": {
        a = `<u>${d}</u>`, r = 3, i = -4;
        break;
      }
      case "italic": {
        a = `*${d}*`, r = 1, i = -1;
        break;
      }
      case "strikeThrough": {
        a = `~~${d}~~`, r = 2, i = -2;
        break;
      }
      case "sub": {
        a = `<sub>${d}</sub>`, r = 5, i = -6;
        break;
      }
      case "sup": {
        a = `<sup>${d}</sup>`, r = 5, i = -6;
        break;
      }
      case "codeRow": {
        a = "`" + d + "`", r = 1, i = -1;
        break;
      }
      case "quote": {
        a = `> ${d}`, r = 2;
        break;
      }
      case "orderedList": {
        a = `1. ${d}`, r = 3;
        break;
      }
      case "unorderedList": {
        a = `- ${d}`, r = 2;
        break;
      }
      case "task": {
        a = `- [ ] ${d}`, r = 6;
        break;
      }
      case "code": {
        const u = l.text || d || "", C = l.mode || "language";
        a = `\`\`\`${C}
${u}
\`\`\`
`, r = 3, i = 3 + C.length - a.length;
        break;
      }
      case "table": {
        a = "|";
        const { selectedShape: u = { x: 1, y: 1 } } = l, { x: C, y: w } = u;
        for (let S = 0; S <= w; S++)
          a += " col |";
        a += `
|`;
        for (let S = 0; S <= w; S++)
          a += " - |";
        for (let S = 0; S <= C; S++) {
          a += `
|`;
          for (let M = 0; M <= w; M++)
            a += " content |";
        }
        r = 2, i = 5 - a.length;
        break;
      }
      case "link": {
        const { desc: u, url: C } = l;
        a = `[${u}](${C})`, h = !1;
        break;
      }
      case "image": {
        const { desc: u, url: C, urls: w } = l;
        w instanceof Array ? a = w.reduce((S, M) => S + `![${u}](${M})
`, "") : a = `![${u}](${C})
`, h = !1;
        break;
      }
      case "flow": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.flow) || `flowchart TD 
  Start --> Stop`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "sequence": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.sequence) || `sequenceDiagram
  A->>B: hello!
  B-->>A: hi!
  A-)B: bye!`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "gantt": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.gantt) || `gantt
title A Gantt Diagram
dateFormat  YYYY-MM-DD
section Section
A task  :a1, 2014-01-01, 30d
Another task  :after a1, 20d`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "class": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.class) || `classDiagram
  class Animal
  Vehicle <|-- Car`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "state": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.state) || `stateDiagram-v2
  s1 --> s2`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "pie": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.pie) || `pie title Pets adopted by volunteers
  "Dogs" : 386
  "Cats" : 85
  "Rats" : 15`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "relationship": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.relationship) || `erDiagram
  CAR ||--o{ NAMED-DRIVER : allows
  PERSON ||--o{ NAMED-DRIVER : is`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "journey": {
        a = `\`\`\`mermaid
${(s == null ? void 0 : s.journey) || `journey
  title My working day
  section Go to work
    Make tea: 5: Me
    Go upstairs: 3: Me
    Do work: 1: Me, Cat
  section Go home
    Go downstairs: 5: Me
    Sit down: 5: Me`}
\`\`\`
`, r = 3, i = 10 - a.length;
        break;
      }
      case "katexInline": {
        a = "$$", r = 1, i = -1;
        break;
      }
      case "katexBlock": {
        a = `$$

$$
`, r = 3, i = -4;
        break;
      }
      case "universal": {
        const { generate: u } = l, C = u(d);
        a = C.targetValue, h = C.select ?? !0, r = C.deviationStart || 0, i = C.deviationEnd || 0;
      }
    }
  return {
    text: a,
    options: {
      // 是否选中
      select: h,
      // 选中时，开始位置的偏移量
      deviationStart: r,
      // 结束的偏移量
      deviationEnd: i,
      // 是否整个替换
      replaceAll: f
    }
  };
}, Gl = "#e5c07b", bt = "var(--md-color)", Kl = "#56b6c2", jl = "#ffffff", ue = "var(--md-color)", vt = "#e5c07b", Zl = "#e5c07b", Xl = "var(--md-color)", kt = "#d19a66", Yl = "#c678dd", Jl = "#21252b", Ql = "#2c313a", Ct = "var(--md-bk-color)", $e = "var(--md-bk-color)", eo = "#ceedfa33", $t = "#528bff", to = Se.theme(
  {
    "&": {
      color: ue,
      backgroundColor: Ct
    },
    ".cm-content": {
      caretColor: $t
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: $t },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: eo },
    ".cm-panels": { backgroundColor: Jl, color: ue },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: Ct,
      color: ue,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: Ql
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: $e
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: $e,
      borderBottomColor: $e
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: ue
      }
    }
  },
  { dark: !0 }
), lo = Ot.define([
  { tag: c.keyword, color: Yl },
  { tag: [c.name, c.deleted, c.character, c.propertyName, c.macroName], color: bt },
  { tag: [c.function(c.variableName), c.labelName], color: Zl },
  { tag: [c.color, c.constant(c.name), c.standard(c.name)], color: kt },
  { tag: [c.definition(c.name), c.separator], color: ue },
  {
    tag: [
      c.typeName,
      c.className,
      c.number,
      c.changed,
      c.annotation,
      c.modifier,
      c.self,
      c.namespace
    ],
    color: Gl
  },
  {
    tag: [
      c.operator,
      c.operatorKeyword,
      c.url,
      c.escape,
      c.regexp,
      c.link,
      c.special(c.string)
    ],
    color: Kl
  },
  { tag: [c.meta, c.comment], color: vt },
  { tag: c.strong, fontWeight: "bold" },
  { tag: c.emphasis, fontStyle: "italic" },
  { tag: c.strikethrough, textDecoration: "line-through" },
  { tag: c.link, color: vt, textDecoration: "underline" },
  { tag: c.heading, fontWeight: "bold", color: bt },
  { tag: [c.atom, c.bool, c.special(c.variableName)], color: kt },
  { tag: [c.processingInstruction, c.string, c.inserted], color: Xl },
  { tag: c.invalid, color: jl }
]), pt = [
  to,
  Vt(lo)
], oo = "#e5c07b", yt = "#3f4a54", ao = "#56b6c2", no = "#fff", de = "#3f4a54", Tt = "#2d8cf0", io = "#2d8cf0", ro = "#3f4a54", wt = "#d19a66", so = "#c678dd", co = "#21252b", uo = "#ceedfa33", xt = "var(--md-bk-color)", pe = "var(--md-bk-color)", mo = "#bad5fa", St = "#3f4a54", go = Se.theme(
  {
    "&": {
      color: de,
      backgroundColor: xt
    },
    ".cm-content": {
      caretColor: St
    },
    ".cm-cursor, .cm-dropCursor": { borderLeftColor: St },
    "&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection": { backgroundColor: mo },
    ".cm-panels": { backgroundColor: co, color: de },
    ".cm-panels.cm-panels-top": { borderBottom: "2px solid black" },
    ".cm-panels.cm-panels-bottom": { borderTop: "2px solid black" },
    ".cm-searchMatch": {
      backgroundColor: "#72a1ff59",
      outline: "1px solid #457dff"
    },
    ".cm-searchMatch.cm-searchMatch-selected": {
      backgroundColor: "#6199ff2f"
    },
    ".cm-activeLine": { backgroundColor: "#ceedfa33" },
    ".cm-selectionMatch": { backgroundColor: "#aafe661a" },
    "&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket": {
      backgroundColor: "#bad0f847"
    },
    ".cm-gutters": {
      backgroundColor: xt,
      color: de,
      borderRight: "1px solid",
      borderColor: "var(--md-border-color)"
    },
    ".cm-activeLineGutter": {
      backgroundColor: uo
    },
    ".cm-foldPlaceholder": {
      backgroundColor: "transparent",
      border: "none",
      color: "#ddd"
    },
    ".cm-tooltip": {
      border: "1px solid var(--md-border-color)",
      backgroundColor: pe
    },
    ".cm-tooltip .cm-tooltip-arrow:before": {
      borderTopColor: "transparent",
      borderBottomColor: "transparent"
    },
    ".cm-tooltip .cm-tooltip-arrow:after": {
      borderTopColor: pe,
      borderBottomColor: pe
    },
    ".cm-tooltip-autocomplete": {
      "& > ul > li[aria-selected]": {
        color: de
      }
    }
  }
  // { dark: true }
), fo = Ot.define([
  { tag: c.keyword, color: so },
  { tag: [c.name, c.deleted, c.character, c.propertyName, c.macroName], color: yt },
  { tag: [c.function(c.variableName), c.labelName], color: io },
  { tag: [c.color, c.constant(c.name), c.standard(c.name)], color: wt },
  { tag: [c.definition(c.name), c.separator], color: de },
  {
    tag: [
      c.typeName,
      c.className,
      c.number,
      c.changed,
      c.annotation,
      c.modifier,
      c.self,
      c.namespace
    ],
    color: oo
  },
  {
    tag: [
      c.operator,
      c.operatorKeyword,
      c.url,
      c.escape,
      c.regexp,
      c.link,
      c.special(c.string)
    ],
    color: ao
  },
  { tag: [c.meta, c.comment], color: Tt },
  { tag: c.strong, fontWeight: "bold" },
  { tag: c.emphasis, fontStyle: "italic" },
  { tag: c.strikethrough, textDecoration: "line-through" },
  { tag: c.link, color: Tt, textDecoration: "underline" },
  { tag: c.heading, fontWeight: "bold", color: yt },
  { tag: [c.atom, c.bool, c.special(c.variableName)], color: wt },
  { tag: [c.processingInstruction, c.string, c.inserted], color: ro },
  { tag: c.invalid, color: no }
]), Mt = [
  go,
  Vt(fo)
], be = (e, o, l, a, r) => (i, h, f, d) => {
  const s = `${e}${o}`.slice(d - f);
  i.dispatch(i.state.replaceSelection(`${s}${l}${a}`));
  const g = f + h.label.length + (r === "title" ? l.length : 0);
  i.dispatch({
    selection: _.create(
      [
        _.range(
          f + h.label.length + (r === "title" ? 1 : -o.length),
          g
        ),
        _.cursor(g)
      ],
      1
    )
  }), i.focus();
}, At = (e) => (o, l, a, r) => {
  const i = e.slice(r - a);
  o.dispatch(o.state.replaceSelection(`${i} `));
}, ho = (e) => {
  const o = (l) => {
    const a = l.matchBefore(
      /^#+|^-\s*\[*\s*\]*|`+|\[|!\[*|^\|\s?\|?|^\$\$?|!+\s*\w*/
    );
    return a === null || a.from == a.to && l.explicit ? null : {
      from: a.from,
      options: [
        // 标题
        ...["h1", "h2", "h3", "h4", "h5", "h6"].map((r, i) => {
          const h = new Array(i + 1).fill("#").join("");
          return {
            label: h,
            type: "text",
            apply: At(h)
          };
        }),
        // 任务列表
        ...["unchecked", "checked"].map((r) => {
          const i = r === "checked" ? "- [x]" : "- [ ]";
          return {
            label: i,
            type: "text",
            apply: At(i)
          };
        }),
        // 代码
        ...[
          ["`", ""],
          ["```", "language"],
          ["```mermaid\n", ""]
        ].map((r) => ({
          label: `${r[0]}${r[1]}`,
          type: "text",
          apply: be(r[0], r[1], "", r[0] === "`" ? "`" : "\n```", "type")
        })),
        // 链接
        {
          label: "[]()",
          type: "text"
        },
        {
          label: "![]()",
          type: "text"
        },
        // 表格
        {
          label: "| |",
          type: "text",
          detail: "table",
          apply: `| col | col | col |
| - | - | - |
| content | content | content |
| content | content | content |`
        },
        // 公式
        {
          label: "$",
          type: "text",
          apply: be("$", "", "", "$", "type")
        },
        {
          label: "$$",
          type: "text",
          apply: be("$$", "", `
`, `
$$`, "title")
        },
        // 那啥？
        ...[
          "note",
          "abstract",
          "info",
          "tip",
          "success",
          "question",
          "warning",
          "failure",
          "danger",
          "bug",
          "example",
          "quote",
          "hint",
          "caution",
          "error",
          "attention"
        ].map((r) => ({
          label: `!!! ${r}`,
          type: "text",
          apply: be("!!!", ` ${r}`, " Title", `

!!!`, "title")
        }))
      ]
    };
  };
  return gl({
    override: e ? [o, ...e] : [o]
  });
}, Lt = ho, ee = (e) => {
  const o = new ce();
  return (a) => (o.get(e.state) ? e.dispatch({ effects: o.reconfigure(a) }) : e.dispatch({
    effects: nl.appendConfig.of(o.of(a))
  }), !0);
};
class bo {
  constructor(o) {
    U(this, "view");
    U(this, "maxLength", Number.MAX_SAFE_INTEGER);
    // 切换tabSize的执行方法。切换时，Compartment实例需要相同
    U(this, "toggleTabSize");
    U(this, "togglePlaceholder");
    /**
     * 设置全部的扩展
     */
    U(this, "setExtensions");
    U(this, "toggleDisabled");
    U(this, "toggleReadOnly");
    U(this, "toggleMaxlength");
    this.view = o, this.toggleTabSize = ee(this.view), this.togglePlaceholder = ee(this.view), this.setExtensions = ee(this.view), this.toggleDisabled = ee(this.view), this.toggleReadOnly = ee(this.view), this.toggleMaxlength = ee(this.view);
  }
  getValue() {
    return this.view.state.doc.toString();
  }
  /**
   * 设置内容
   *
   * @param insert 待插入内容
   * @param from 插入开始位置
   * @param to 插入结束位置
   */
  setValue(o, l = 0, a = this.view.state.doc.length) {
    this.view.dispatch({
      changes: {
        from: l,
        to: a,
        insert: o
      }
    });
  }
  /**
   * 获取选中的文本
   */
  getSelectedText() {
    const { from: o, to: l } = this.view.state.selection.main;
    return this.view.state.sliceDoc(o, l);
  }
  /**
   * 使用新的内容替换选中的内容
   *
   * @param text 待替换内容
   * @param options 替换后是否选中
   */
  replaceSelectedText(o, l = {
    // 是否选中
    select: !0,
    // 选中时，开始位置的偏移量
    deviationStart: 0,
    // 结束的偏移量
    deviationEnd: 0,
    // 直接替换所有文本
    replaceAll: !1
  }, a) {
    try {
      if (l.replaceAll) {
        if (this.setValue(o), o.length > this.maxLength)
          throw new Error("The input text is too long");
        return;
      }
      if (this.view.state.doc.length - this.getSelectedText().length + o.length > this.maxLength)
        throw new Error("The input text is too long");
      const { from: r } = this.view.state.selection.main;
      if (this.view.dispatch(this.view.state.replaceSelection(o)), l.select) {
        const i = r + o.length + l.deviationEnd;
        this.view.dispatch({
          selection: _.create(
            [
              _.range(r + l.deviationStart, i),
              _.cursor(i)
            ],
            1
          )
        });
      }
      this.view.focus();
    } catch (r) {
      if (r.message === "The input text is too long")
        b.emit(a, le, {
          name: "overlength",
          message: r.message,
          data: o
        });
      else
        throw r;
    }
  }
  /**
   * 设置tabSize
   *
   * @param tabSize 需要切换的大小
   */
  setTabSize(o) {
    this.toggleTabSize([
      Ce.tabSize.of(o),
      ml.of(" ".repeat(o))
    ]);
  }
  /**
   * 设置placeholder
   *
   * @param t 目标内容
   */
  setPlaceholder(o) {
    this.togglePlaceholder(tl(o));
  }
  focus(o) {
    if (this.view.focus(), !o)
      return;
    let l = 0, a = 0, r = 0;
    switch (o) {
      case "start":
        break;
      case "end": {
        l = a = r = this.getValue().length;
        break;
      }
      default:
        l = o.rangeAnchor || o.cursorPos, a = o.rangeHead || o.cursorPos, r = o.cursorPos;
    }
    this.view.dispatch({
      scrollIntoView: !0,
      selection: _.create(
        [_.range(l, a), _.cursor(r)],
        1
      )
    });
  }
  setDisabled(o) {
    this.toggleDisabled([Se.editable.of(!o)]);
  }
  setReadOnly(o) {
    this.toggleReadOnly([Ce.readOnly.of(o)]);
  }
  setMaxLength(o) {
    this.maxLength = o, this.toggleMaxlength([
      Ce.changeFilter.of((l) => l.newDoc.length <= o)
    ]);
  }
}
const vo = (e) => {
  const o = I("editorId");
  return (a) => {
    if (!a.clipboardData)
      return;
    if (a.clipboardData.files.length > 0) {
      const { files: i } = a.clipboardData;
      b.emit(
        o,
        xe,
        Array.from(i).filter((h) => /image\/.*/.test(h.type))
      ), a.preventDefault();
      return;
    }
    if (e.autoDetectCode && a.clipboardData.types.includes("vscode-editor-data")) {
      const i = JSON.parse(a.clipboardData.getData("vscode-editor-data"));
      b.emit(o, x, "code", {
        mode: i.mode,
        text: a.clipboardData.getData("text/plain")
      }), a.preventDefault();
      return;
    }
    const r = a.clipboardData.getData("text/plain");
    e.maxlength && r.length + e.modelValue.length > e.maxlength && b.emit(o, le, {
      name: "overlength",
      message: "The input text is too long",
      data: r
    });
  };
}, ko = vo, Co = (e, o) => [
  {
    key: "Ctrl-b",
    mac: "Cmd-b",
    run: () => (b.emit(e, x, "bold"), !0)
  },
  {
    key: "Ctrl-d",
    mac: "Cmd-d",
    run: il,
    preventDefault: !0
  },
  {
    key: "Ctrl-s",
    mac: "Cmd-s",
    run: (M) => (b.emit(e, Et, M.state.doc.toString()), !0),
    shift: () => (b.emit(e, x, "strikeThrough"), !0)
  },
  {
    key: "Ctrl-u",
    mac: "Cmd-u",
    run: () => (b.emit(e, x, "underline"), !0),
    shift: () => (b.emit(e, x, "unorderedList"), !0)
  },
  {
    key: "Ctrl-i",
    mac: "Cmd-i",
    run: () => (b.emit(e, x, "italic"), !0),
    shift: () => (b.emit(e, Te, "image"), !0)
  },
  {
    key: "Ctrl-1",
    mac: "Cmd-1",
    run: () => (b.emit(e, x, "h1"), !0)
  },
  {
    key: "Ctrl-2",
    mac: "Cmd-2",
    run: () => (b.emit(e, x, "h2"), !0)
  },
  {
    key: "Ctrl-3",
    mac: "Cmd-3",
    run: () => (b.emit(e, x, "h3"), !0)
  },
  {
    key: "Ctrl-4",
    mac: "Cmd-4",
    run: () => (b.emit(e, x, "h4"), !0)
  },
  {
    key: "Ctrl-5",
    mac: "Cmd-5",
    run: () => (b.emit(e, x, "h5"), !0)
  },
  {
    key: "Ctrl-6",
    mac: "Cmd-6",
    run: () => (b.emit(e, x, "h6"), !0)
  },
  {
    key: "Ctrl-ArrowUp",
    mac: "Cmd-ArrowUp",
    run: () => (b.emit(e, x, "sup"), !0)
  },
  {
    key: "Ctrl-ArrowDown",
    mac: "Cmd-ArrowDown",
    run: () => (b.emit(e, x, "sub"), !0)
  },
  {
    key: "Ctrl-o",
    mac: "Cmd-o",
    run: () => (b.emit(e, x, "orderedList"), !0)
  },
  {
    key: "Ctrl-c",
    mac: "Cmd-c",
    shift: () => (b.emit(e, x, "code"), !0),
    any(M, D) {
      return (D.ctrlKey || D.metaKey) && D.altKey && D.code === "KeyC" ? (b.emit(e, x, "codeRow"), !0) : !1;
    }
  },
  {
    key: "Ctrl-l",
    mac: "Cmd-l",
    run: () => (b.emit(e, Te, "link"), !0)
  },
  {
    key: "Ctrl-f",
    mac: "Cmd-f",
    shift: () => o.noPrettier ? !1 : (b.emit(e, x, "prettier"), !0)
  },
  {
    any: (M, D) => (D.ctrlKey || D.metaKey) && D.altKey && D.shiftKey && D.code === "KeyT" ? (b.emit(e, x, "table"), !0) : !1
  }
], $o = Co, po = (e) => {
  const o = I("tabWidth"), l = I("editorId"), a = I("theme"), r = P(), i = Wt(), h = new ce(), f = new ce(), d = new ce(), s = new ce(), g = $o(l, e), p = ko(e), k = [
    ll.of([...rl, ...sl, ...g, cl]),
    s.of(ft()),
    h.of(al({ codeLanguages: ol })),
    // 横向换行
    he.lineWrapping,
    he.updateListener.of((m) => {
      m.docChanged && e.onChange(m.state.doc.toString());
    }),
    he.domEventHandlers({
      paste: p,
      blur: e.onBlur,
      focus: e.onFocus,
      drop: e.onDrop,
      input: (m) => {
        e.onInput && e.onInput(m);
        const { data: v } = m;
        e.maxlength && e.modelValue.length + v.length > e.maxlength && b.emit(l, le, {
          name: "overlength",
          message: "The input text is too long",
          data: v
        });
      }
    })
  ], $ = () => {
    const m = [
      ...k,
      f.of(a.value === "light" ? Mt : pt),
      d.of(Lt(e.completions))
    ];
    return J.codeMirrorExtensions(a.value, m, [
      ...g
    ]);
  };
  return Q(() => {
    const m = new he({
      doc: e.modelValue,
      parent: r.value,
      extensions: [$()]
    }), v = new bo(m);
    i.value = v, setTimeout(() => {
      v.setTabSize(o), v.setDisabled(e.disabled), v.setReadOnly(e.readonly), e.placeholder && v.setPlaceholder(e.placeholder), typeof e.maxlength == "number" && v.setMaxLength(e.maxlength), e.autofocus && m.focus();
    }, 0), b.on(l, {
      name: Nt,
      callback() {
        ul(m);
      }
    }), b.on(l, {
      name: Ht,
      callback() {
        dl(m);
      }
    }), b.on(l, {
      name: x,
      callback(u, C = {}) {
        var M;
        const { text: w, options: S } = _l(u, i.value, C);
        (M = i.value) == null || M.replaceSelectedText(w, S, l);
      }
    });
  }), H(
    a,
    () => {
      var m;
      (m = i.value) == null || m.view.dispatch({
        effects: f.reconfigure(a.value === "light" ? Mt : pt)
      });
    },
    {
      deep: !0
    }
  ), H(
    () => e.completions,
    () => {
      var m;
      (m = i.value) == null || m.view.dispatch({
        effects: d.reconfigure(Lt(e.completions))
      });
    },
    {
      deep: !0
    }
  ), H(
    () => e.modelValue,
    () => {
      var m, v;
      ((m = i.value) == null ? void 0 : m.getValue()) !== e.modelValue && ((v = i.value) == null || v.setValue(e.modelValue));
    }
  ), H(
    () => e.placeholder,
    () => {
      var m;
      (m = i.value) == null || m.setPlaceholder(e.placeholder);
    }
  ), H(
    () => e.disabled,
    () => {
      var m;
      (m = i.value) == null || m.setDisabled(e.disabled);
    }
  ), H(
    () => e.readonly,
    () => {
      var m;
      (m = i.value) == null || m.setDisabled(e.readonly);
    }
  ), H(
    () => e.maxlength,
    () => {
      var m;
      e.maxlength && ((m = i.value) == null || m.setMaxLength(e.maxlength));
    }
  ), {
    inputWrapperRef: r,
    codeMirrorUt: i,
    resetHistory() {
      var m, v;
      (m = i.value) == null || m.view.dispatch({
        effects: s.reconfigure([])
      }), (v = i.value) == null || v.view.dispatch({
        effects: s.reconfigure(ft())
      });
    }
  };
}, yo = po, To = (e, o, l) => {
  const a = G({
    resizedWidth: e.inputBoxWitdh
  }), r = G({
    width: e.inputBoxWitdh
  }), i = G({
    left: e.inputBoxWitdh,
    display: "initial"
  }), h = (s) => {
    var m, v, u;
    const g = ((m = o.value) == null ? void 0 : m.offsetWidth) || 0, p = ((v = o.value) == null ? void 0 : v.getBoundingClientRect().x) || 0;
    let k = s.x - p;
    k < fe ? k = fe : k > g - fe && (k = g - fe);
    const $ = `${k}px`;
    r.width = $, i.left = $, a.resizedWidth = $, (u = e.onInputBoxWitdhChange) == null || u.call(e, $);
  }, f = () => {
    document.addEventListener("mousemove", h);
  }, d = () => {
    document.removeEventListener("mousemove", h);
  };
  return Q(() => {
    var s;
    (s = l.value) == null || s.addEventListener("mousedown", f), document.addEventListener("mouseup", d);
  }), Dt(() => {
    var s, g;
    (s = l.value) == null || s.removeEventListener("mousedown", f), (g = l.value) == null || g.removeEventListener("mouseup", d);
  }), H(
    () => e.inputBoxWitdh,
    (s) => {
      s && (r.width = s, i.left = s);
    }
  ), H(
    [te(e.setting, "htmlPreview"), te(e.setting, "preview")],
    () => {
      !e.setting.htmlPreview && !e.setting.preview ? (r.width = "100%", i.display = "none") : (r.width = a.resizedWidth, i.display = "initial");
    },
    {
      immediate: !0
    }
  ), { inputWrapperStyle: r, resizeOperateStyle: i };
}, wo = To, xo = /* @__PURE__ */ W({
  name: "MDEditorContent",
  props: fl,
  setup(e, o) {
    const l = I("editorId"), a = P(""), r = P(), i = P(), {
      inputWrapperRef: h,
      codeMirrorUt: f,
      resetHistory: d
    } = yo(e), {
      inputWrapperStyle: s,
      resizeOperateStyle: g
    } = wo(e, r, i);
    return Ul(e, a, f), o.expose({
      getSelectedText() {
        var p;
        return (p = f.value) == null ? void 0 : p.getSelectedText();
      },
      focus(p) {
        var k;
        (k = f.value) == null || k.focus(p);
      },
      resetHistory: d
    }), () => t("div", {
      class: `${n}-content${e.setting.htmlPreview || e.setting.preview ? " has-preview" : ""}`,
      ref: r
    }, [t("div", {
      class: `${n}-input-wrapper`,
      style: s,
      ref: h
    }, null), (e.setting.htmlPreview || e.setting.preview) && t("div", {
      class: `${n}-resize-operate`,
      style: g,
      ref: i
    }, null), t(hl, {
      modelValue: e.modelValue,
      setting: e.setting,
      onHtmlChanged: (p) => {
        a.value = p, e.onHtmlChanged(p);
      },
      onGetCatalog: e.onGetCatalog,
      mdHeadingId: e.mdHeadingId,
      noMermaid: e.noMermaid,
      sanitize: e.sanitize,
      noKatex: e.noKatex,
      formatCopiedText: e.formatCopiedText,
      noHighlight: e.noHighlight,
      noImgZoomIn: e.noImgZoomIn,
      sanitizeMermaid: e.sanitizeMermaid
    }, null), e.catalogVisible && t(Ft, {
      theme: e.theme,
      class: `${n}-catalog-editor`,
      editorId: l,
      mdHeadingId: e.mdHeadingId,
      key: "internal-catalog"
    }, null)]);
  }
}), So = /* @__PURE__ */ W({
  props: {
    modelValue: {
      type: String,
      default: ""
    }
  },
  setup(e) {
    const o = I("usedLanguageText");
    return () => {
      var l, a;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`
      }, [`${(l = o.value.footer) == null ? void 0 : l.markdownTotal}:`]), t("span", null, [((a = e.modelValue) == null ? void 0 : a.length) || 0])]);
    };
  }
}), Mo = {
  checked: {
    type: Boolean,
    default: !1
  },
  onChange: {
    type: Function,
    default: () => {
    }
  }
}, Ao = /* @__PURE__ */ W({
  props: Mo,
  setup(e) {
    return () => t("div", {
      class: [`${n}-checkbox`, e.checked && `${n}-checkbox-checked`],
      onClick: () => {
        e.onChange(!e.checked);
      }
    }, null);
  }
}), Lo = {
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  }
}, Io = /* @__PURE__ */ W({
  props: Lo,
  setup(e) {
    const o = I("usedLanguageText");
    return () => {
      var l;
      return t("div", {
        class: `${n}-footer-item`
      }, [t("label", {
        class: `${n}-footer-label`,
        onClick: () => {
          e.onScrollAutoChange(!e.scrollAuto);
        }
      }, [(l = o.value.footer) == null ? void 0 : l.scrollAuto]), t(Ao, {
        checked: e.scrollAuto,
        onChange: e.onScrollAutoChange
      }, null)]);
    };
  }
}), Do = {
  modelValue: {
    type: String,
    default: ""
  },
  footers: {
    type: Array,
    default: []
  },
  scrollAuto: {
    type: Boolean
  },
  onScrollAutoChange: {
    type: Function,
    default: () => {
    }
  },
  defFooters: {
    type: Object
  }
}, Eo = /* @__PURE__ */ W({
  name: "MDEditorFooter",
  props: Do,
  setup(e) {
    const o = we(() => {
      const a = e.footers.indexOf("="), r = a === -1 ? e.footers : e.footers.slice(0, a), i = a === -1 ? [] : e.footers.slice(a, Number.MAX_SAFE_INTEGER);
      return [r, i];
    }), l = (a) => {
      if (Ut.includes(a))
        switch (a) {
          case "markdownTotal":
            return t(So, {
              modelValue: e.modelValue
            }, null);
          case "scrollSwitch":
            return t(Io, {
              scrollAuto: e.scrollAuto,
              onScrollAutoChange: e.onScrollAutoChange
            }, null);
        }
      else
        return e.defFooters instanceof Array ? e.defFooters[a] || "" : e.defFooters && e.defFooters.children instanceof Array && e.defFooters.children[a] || "";
    };
    return () => {
      const a = o.value[0].map((i) => l(i)), r = o.value[1].map((i) => l(i));
      return t("div", {
        class: `${n}-footer`
      }, [t("div", {
        class: `${n}-footer-left`
      }, [a]), t("div", {
        class: `${n}-footer-right`
      }, [r])]);
    };
  }
}), Ho = /* @__PURE__ */ W({
  name: "MdEditorV3",
  props: bl,
  emits: vl,
  setup(e, o) {
    const {
      editorId: l,
      noKatex: a,
      noMermaid: r,
      noPrettier: i,
      noUploadImg: h,
      noHighlight: f
    } = e, d = G({
      scrollAuto: e.scrollAuto
    }), s = P();
    kl(e, o), Cl(e), $l(e), pl(e, o);
    const [g, p] = yl(e, o), k = Tl(e);
    return Dt(() => {
      b.clear(l);
    }), wl(e, o, k, g, p, s), () => {
      var v;
      const $ = ht({
        props: e,
        ctx: o
      }, "defToolbars"), m = ht({
        props: e,
        ctx: o
      }, "defFooters");
      return t("div", {
        id: l,
        class: [n, e.class, e.theme === "dark" && `${n}-dark`, g.fullscreen || g.pageFullscreen ? `${n}-fullscreen` : ""],
        style: e.style
      }, [t(Pl, {
        noPrettier: i,
        toolbars: e.toolbars,
        toolbarsExclude: e.toolbarsExclude,
        setting: g,
        updateSetting: p,
        tableShape: e.tableShape,
        defToolbars: $,
        noUploadImg: h,
        showToolbarName: e.showToolbarName
      }, null), t(xo, {
        ref: s,
        modelValue: e.modelValue,
        setting: g,
        mdHeadingId: e.mdHeadingId,
        noMermaid: r,
        noPrettier: i,
        sanitize: e.sanitize,
        placeholder: e.placeholder,
        noKatex: a,
        scrollAuto: d.scrollAuto,
        formatCopiedText: e.formatCopiedText,
        autofocus: e.autoFocus,
        disabled: e.disabled,
        readonly: e.readOnly,
        maxlength: e.maxLength,
        autoDetectCode: e.autoDetectCode,
        noHighlight: f,
        onChange: (u) => {
          e.onChange && e.onChange(u), o.emit("update:modelValue", u), o.emit("onChange", u);
        },
        onHtmlChanged: (u) => {
          e.onHtmlChanged && e.onHtmlChanged(u), o.emit("onHtmlChanged", u);
        },
        onGetCatalog: (u) => {
          e.onGetCatalog && e.onGetCatalog(u), o.emit("onGetCatalog", u);
        },
        onBlur: (u) => {
          e.onBlur && e.onBlur(u), o.emit("onBlur", u);
        },
        onFocus: (u) => {
          e.onFocus && e.onFocus(u), o.emit("onFocus", u);
        },
        onInput: (u) => {
          e.onInput && e.onInput(u), o.emit("onInput", u);
        },
        completions: e.completions,
        catalogVisible: k.value,
        theme: e.theme,
        noImgZoomIn: e.noImgZoomIn,
        onDrop: (u) => {
          e.onDrop && e.onDrop(u), o.emit("onDrop", u);
        },
        inputBoxWitdh: e.inputBoxWitdh,
        onInputBoxWitdhChange: (u) => {
          e.onInputBoxWitdhChange && e.onInputBoxWitdhChange(u), o.emit("onInputBoxWitdhChange", u);
        },
        sanitizeMermaid: e.sanitizeMermaid
      }, null), ((v = e.footers) == null ? void 0 : v.length) > 0 && t(Eo, {
        modelValue: e.modelValue,
        footers: e.footers,
        defFooters: m,
        scrollAuto: d.scrollAuto,
        onScrollAutoChange: (u) => d.scrollAuto = u
      }, null)]);
    };
  }
}), ye = Ho;
ye.install = (e) => (e.component(ye.name, ye), e.use(Sl).use(Xt).use(Ml).use(Ft).use(xl), e);
export {
  ye as default
};
