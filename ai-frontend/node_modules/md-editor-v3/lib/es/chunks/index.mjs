import { inject as _, onMounted as P, watch as C, toRef as te, nextTick as U, shallowRef as B, ref as R, computed as F, defineComponent as ne, createVNode as M, Fragment as pe, reactive as oe, provide as H, onBeforeUnmount as he } from "vue";
import { e as S, p as h, m as ge, k as D, f as V, h as ye, s as z, a as ve, i as be, g as W, j as K, l as we, b as ke, d as $e } from "./config.mjs";
import { a as Ce, b as y, P as Ie, C as q, R as G, B as A, O as re, E as Se, U as Ee, c as ae, d as Z, F as J, e as Q, H as X, f as Y, h as le, i as Pe } from "./index4.mjs";
import { a as T, u as _e } from "./dom.mjs";
import Te from "medium-zoom";
import { debounce as ie, uuid as j } from "@vavt/util";
import He from "copy-to-clipboard";
import Fe from "markdown-it";
import xe from "markdown-it-image-figures";
import Me from "markdown-it-task-lists";
import Re from "lru-cache";
const Ae = (e, a) => {
  const l = _("editorId"), { noImgZoomIn: t } = e, n = ie(() => {
    const i = document.querySelectorAll(`#${l}-preview img`);
    i.length !== 0 && Te(i, {
      background: "#00000073"
    });
  });
  P(() => {
    !t && n();
  }), C([a, te(e.setting, "preview")], () => {
    !t && n();
  });
}, Be = Ae, Le = (e, a) => {
  if (typeof a[e] == "string")
    return a[e];
  const l = `<i class="${h}-iconfont ${h}-icon-${e}"></i>`;
  switch (S.iconfontType) {
    case "svg":
      return `<svg class="${h}-icon" aria-hidden="true"><use xlink:href="#${h}-icon-${e}"></use></svg>`;
    default:
      return l;
  }
}, Ne = (e, a, l) => {
  const t = _("editorId"), n = _("usedLanguageText"), i = _("customIcon"), r = () => {
    document.querySelectorAll(`#${t}-preview pre`).forEach((s) => {
      var v, m;
      let o = -1;
      (v = s.querySelector(".copy-button")) == null || v.remove();
      const d = ((m = n.value.copyCode) == null ? void 0 : m.text) || "复制代码", b = document.createElement("span");
      b.setAttribute("class", "copy-button"), b.dataset.tips = d, b.innerHTML = Le("copy", i.value), b.addEventListener("click", () => {
        var w, E;
        clearTimeout(o);
        const p = s.querySelector("code").innerText, f = He(e.formatCopiedText(p)), k = ((w = n.value.copyCode) == null ? void 0 : w.successTips) || "已复制！", g = ((E = n.value.copyCode) == null ? void 0 : E.failTips) || "已复制！";
        b.dataset.tips = f ? k : g, o = window.setTimeout(() => {
          b.dataset.tips = d;
        }, 1500);
      }), s.appendChild(b);
    });
  }, u = () => {
    U(r);
  }, c = (s) => {
    s && U(r);
  };
  C([a, l], u), C(() => e.setting.preview, c), C(() => e.setting.htmlPreview, c), C(() => n.value, r), P(r);
}, Oe = Ne, Ue = (e) => {
  var i;
  const a = (i = S.editorExtensions) == null ? void 0 : i.highlight, l = a == null ? void 0 : a.instance, t = _("highlight"), n = B(l);
  return P(() => {
    if (!e.noHighlight && !n.value) {
      const r = document.createElement("script");
      r.src = t.value.js, r.onload = () => {
        n.value = window.hljs;
      }, r.id = `${h}-hljs`, T(r, "hljs");
      const u = document.createElement("link");
      u.rel = "stylesheet", u.href = t.value.css, u.id = `${h}-hlCss`, T(u);
    }
  }), C(
    () => t.value.css,
    (r) => {
      _e(`${h}-hlCss`, "href", r);
    }
  ), n;
}, je = Ue, Ge = (e) => {
  const a = _("theme"), { editorExtensions: l, mermaidConfig: t } = S, n = l == null ? void 0 : l.mermaid, i = B(n == null ? void 0 : n.instance), r = B(-1), u = new Re({
    max: 1e3,
    // 缓存10分钟
    ttl: 6e5
  }), c = () => {
    const o = i.value;
    !e.noMermaid && o && (o.initialize(
      t({
        startOnLoad: !1,
        theme: a.value === "dark" ? "dark" : "default"
      })
    ), r.value = r.value + 1);
  };
  return C(
    () => a.value,
    () => {
      u.clear(), c();
    }
  ), P(() => {
    if (!e.noMermaid && !(n != null && n.instance)) {
      const o = (n == null ? void 0 : n.js) || ge;
      if (/\.mjs/.test(o))
        import(
          /* @vite-ignore */
          /* webpackIgnore: true */
          o
        ).then((d) => {
          i.value = d.default, c();
        });
      else {
        const d = document.createElement("script");
        d.id = `${h}-mermaid`, d.src = o, d.onload = () => {
          i.value = window.mermaid, c();
        }, T(d, "mermaid");
      }
    }
  }), { mermaidRef: i, reRenderRef: r, replaceMermaid: () => {
    U(() => {
      if (!e.noMermaid && i.value) {
        const o = document.querySelectorAll(
          `div.${h}-mermaid`
        ), d = document.createElement("div");
        d.style.width = document.body.offsetWidth + "px", d.style.height = document.body.offsetHeight + "px", d.style.position = "fixed", d.style.zIndex = "-10000", d.style.top = "-10000";
        let b = o.length;
        b > 0 && document.body.appendChild(d), o.forEach(async (v) => {
          let m = u.get(v.innerText);
          if (!m) {
            const f = j(), k = i.value.renderAsync || i.value.render;
            let g = "";
            try {
              g = await k(f, v.innerText, d);
            } catch {
            }
            m = await e.sanitizeMermaid(
              typeof g == "string" ? g : g.svg
            ), u.set(v.innerText, m);
          }
          const p = document.createElement("p");
          p.className = `${h}-mermaid`, p.setAttribute("data-processed", ""), p.innerHTML = m, v.dataset.line !== void 0 && (p.dataset.line = v.dataset.line), v.replaceWith(p), --b === 0 && d.remove();
        });
      }
    });
  } };
}, De = Ge, Ve = (e) => {
  var n;
  const a = (n = S.editorExtensions) == null ? void 0 : n.katex, l = a == null ? void 0 : a.instance, t = B(l);
  return P(() => {
    if (!e.noKatex && !t.value) {
      const i = document.createElement("script");
      i.src = (a == null ? void 0 : a.js) || D.js, i.onload = () => {
        t.value = window.katex;
      }, i.id = `${h}-katex`;
      const r = document.createElement("link");
      r.rel = "stylesheet", r.href = (a == null ? void 0 : a.css) || D.css, r.id = `${h}-katexCss`, T(i, "katex"), T(r);
    }
  }), t;
}, ze = Ve, We = (e, a) => {
  const l = e.renderer.rules.fence.bind(e.renderer.rules);
  e.renderer.rules.fence = (t, n, i, r, u) => {
    const c = t[n], s = c.content.trim();
    if (c.info === "mermaid") {
      let o;
      return t[n].map && t[n].level === 0 && (o = t[n].map[0], t[n].attrSet("data-line", String(o))), `<div class="${h}-mermaid" ${o !== void 0 ? "data-line=" + o : ""} data-mermaid-theme=${a.themeRef.value}>${s}</div>`;
    }
    return l(t, n, i, r, u);
  };
}, Ke = We, ee = (e, a) => {
  let l = !0, t = !0;
  const n = e.posMax, i = a > 0 ? e.src.charCodeAt(a - 1) : -1, r = a + 1 <= n ? e.src.charCodeAt(a + 1) : -1;
  return (i === 32 || i === 9 || r >= 48 && r <= 57) && (t = !1), (r === 32 || r === 9) && (l = !1), {
    can_open: l,
    can_close: t
  };
}, qe = (e, a) => {
  let l, t, n, i;
  if (e.src[e.pos] !== "$")
    return !1;
  if (n = ee(e, e.pos), !n.can_open)
    return a || (e.pending += "$"), e.pos += 1, !0;
  const r = e.pos + 1;
  for (l = r; (l = e.src.indexOf("$", l)) !== -1; ) {
    for (i = l - 1; e.src[i] === "\\"; )
      i -= 1;
    if ((l - i) % 2 == 1)
      break;
    l += 1;
  }
  return l === -1 ? (a || (e.pending += "$"), e.pos = r, !0) : l - r === 0 ? (a || (e.pending += "$$"), e.pos = r + 1, !0) : (n = ee(e, l), n.can_close ? (a || (t = e.push("math_inline", "math", 0), t.markup = "$", t.content = e.src.slice(r, l)), e.pos = l + 1, !0) : (a || (e.pending += "$"), e.pos = r, !0));
}, Ze = (e, a, l, t) => {
  let n, i, r, u, c = !1, s = e.bMarks[a] + e.tShift[a], o = e.eMarks[a];
  if (s + 2 > o || e.src.slice(s, s + 2) !== "$$")
    return !1;
  if (s += 2, n = e.src.slice(s, o), t)
    return !0;
  for (n.trim().slice(-2) === "$$" && (n = n.trim().slice(0, -2), c = !0), r = a; !c && (r++, !(r >= l || (s = e.bMarks[r] + e.tShift[r], o = e.eMarks[r], s < o && e.tShift[r] < e.blkIndent))); )
    e.src.slice(s, o).trim().slice(-2) === "$$" && (u = e.src.slice(0, o).lastIndexOf("$$"), i = e.src.slice(s, u), c = !0);
  e.line = r + 1;
  const d = e.push("math_block", "math", 0);
  return d.block = !0, d.content = (n && n.trim() ? n + `
` : "") + e.getLines(a + 1, r, e.tShift[a], !0) + (i && i.trim() ? i : ""), d.map = [a, e.line], d.markup = "$$", !0;
}, Je = (e, a) => {
  const l = (n) => {
    if (a.katexRef.value) {
      const i = a.katexRef.value.renderToString(n, {
        throwOnError: !1
      });
      return `<span class="${h}-katex-inline" data-processed>${i}</span>`;
    } else
      return `<span class="${h}-katex-inline">${n}</span>`;
  }, t = (n, i) => {
    if (a.katexRef.value) {
      const r = a.katexRef.value.renderToString(n, {
        throwOnError: !1,
        displayMode: !0
      });
      return `<p class="${h}-katex-block" data-line=${i} data-processed>${r}</p>`;
    } else
      return `<p class="${h}-katex-block" data-line=${i}>${n}</p>`;
  };
  e.inline.ruler.after("escape", "math_inline", qe), e.block.ruler.after("blockquote", "math_block", Ze, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  }), e.renderer.rules.math_inline = (n, i) => l(n[i].content), e.renderer.rules.math_block = (n, i) => t(n[i].content, n[i].map[0]) + `
`;
}, Qe = Je, Xe = (e, a) => {
  a = a || {};
  const l = 3, t = a.marker || "!", n = t.charCodeAt(0), i = t.length;
  let r = "", u = "";
  const c = (o, d, b, v, m) => {
    const p = o[d];
    return p.type === "admonition_open" ? (o[d].attrPush([
      "class",
      `${h}-admonition ${h}-admonition-${p.info}`
    ]), o[d].attrSet("data-line", String(o[d].map[0]))) : p.type === "admonition_title_open" && o[d].attrPush(["class", `${h}-admonition-title`]), m.renderToken(o, d, b);
  }, s = (o) => {
    const d = o.trim().split(" ", 2);
    u = "", r = d[0], d.length > 1 && (u = o.substring(r.length + 2)), (u === "" || !u) && (u = r);
  };
  e.block.ruler.before(
    "code",
    "admonition",
    (o, d, b, v) => {
      let m, p, f, k = !1, g = o.bMarks[d] + o.tShift[d], w = o.eMarks[d];
      if (n !== o.src.charCodeAt(g))
        return !1;
      for (m = g + 1; m <= w && t[(m - g) % i] === o.src[m]; m++)
        ;
      const E = Math.floor((m - g) / i);
      if (E !== l)
        return !1;
      m -= (m - g) % i;
      const I = o.src.slice(g, m), $ = o.src.slice(m, w);
      if (s($), v)
        return !0;
      for (p = d; p++, !(p >= b || (g = o.bMarks[p] + o.tShift[p], w = o.eMarks[p], g < w && o.sCount[p] < o.blkIndent)); )
        if (n === o.src.charCodeAt(g) && !(o.sCount[p] - o.blkIndent >= 4)) {
          for (m = g + 1; m <= w && t[(m - g) % i] === o.src[m]; m++)
            ;
          if (!(Math.floor((m - g) / i) < E) && (m -= (m - g) % i, m = o.skipSpaces(m), !(m < w))) {
            k = !0;
            break;
          }
        }
      const L = o.parentType, x = o.lineMax;
      return o.parentType = "root", o.lineMax = p, f = o.push("admonition_open", "div", 1), f.markup = I, f.block = !0, f.info = r, f.map = [d, p], f = o.push("admonition_title_open", "p", 1), f.markup = I + " " + r, f.map = [d, p], f = o.push("inline", "", 0), f.content = u, f.map = [d, o.line - 1], f.children = [], f = o.push("admonition_title_close", "p", -1), f.markup = I + " " + r, o.md.block.tokenize(o, d + 1, p), f = o.push("admonition_close", "div", -1), f.markup = o.src.slice(g, m), f.block = !0, o.parentType = L, o.lineMax = x, o.line = p + (k ? 1 : 0), !0;
    },
    {
      alt: ["paragraph", "reference", "blockquote", "list"]
    }
  ), e.renderer.rules.admonition_open = c, e.renderer.rules.admonition_title_open = c, e.renderer.rules.admonition_title_close = c, e.renderer.rules.admonition_close = c;
}, Ye = Xe, et = (e, a) => {
  e.renderer.rules.heading_open = (l, t) => {
    var u;
    const n = l[t], i = ((u = l[t + 1].children) == null ? void 0 : u.reduce((c, s) => c + (s.content || ""), "")) || "", r = n.markup.length;
    return a.headsRef.value.push({
      text: i,
      level: r
    }), n.map && n.level === 0 && (n.attrSet("data-line", String(n.map[0])), n.attrSet(
      "id",
      a.mdHeadingId(i, r, a.headsRef.value.length)
    )), e.renderer.renderToken(l, t, a);
  }, e.renderer.rules.heading_close = (l, t, n, i, r) => r.renderToken(l, t, n);
}, tt = et, nt = (e, a) => {
  const l = e.renderer.rules.fence, t = e.utils.unescapeAll, n = /\[(\w*)(?::([\w ]*))?\]/;
  function i(s) {
    return s.info ? t(s.info).trim() : "";
  }
  function r(s) {
    const o = i(s), [d = null, b = ""] = (n.exec(o) || []).slice(1);
    return [d, b];
  }
  function u(s) {
    const o = i(s);
    return o ? o.split(/(\s+)/g)[0] : "";
  }
  const c = (s, o, d, b, v) => {
    if (s[o].hidden)
      return "";
    const [m, p] = r(s[o]);
    if (m === null)
      return l(s, o, d, b, v);
    let f, k, g, w, E = "", I = "";
    for (let $ = o; $ < s.length && (f = s[$], [k, g] = r(f), k === m); $++)
      f.info = f.info.replace(n, ""), f.hidden = !0, w = $ - o > 0 ? "" : " checked", E += `<li><input type="radio" name="label-group-${a.editorId}-${o}"${w}><label for="group-${a.editorId}-${o}-tab-${$ - o}" onclick="this.previousElementSibling.click()">${g || u(f)}</label></li>
`, I += `<input type="radio" id="group-${a.editorId}-${o}-tab-${$ - o}" name="group-${a.editorId}-${o}"${w}>
` + l(s, $, d, b, v);
    return `<div class="code-tabs">
<ul>
` + E + `</ul>
` + I + "</div>";
  };
  e.renderer.rules.fence = c;
}, ot = nt, rt = (e) => {
  [
    "paragraph_open",
    "table_open",
    "ordered_list_open",
    "bullet_list_open",
    "blockquote_open",
    "hr",
    "html_block",
    "fence"
  ].forEach((a) => {
    const l = e.renderer.rules[a];
    l ? e.renderer.rules[a] = (t, n, i, r, u) => {
      let c;
      const s = l(t, n, i, r, u);
      return t[n].map && t[n].level === 0 && !/^<!--/.test(s) ? (c = t[n].map[0], s.replace(/^(<[^>]*)/, `$1 data-line="${c}"`)) : s;
    } : e.renderer.rules[a] = (t, n, i, r, u) => {
      let c;
      return t[n].map && t[n].level === 0 && (c = t[n].map[0], t[n].attrSet("data-line", String(c))), u.renderToken(t, n, i);
    };
  });
}, at = (e, a) => {
  const { editorConfig: l, markdownItConfig: t, markdownItPlugins: n } = S, i = _("editorId"), r = _("showCodeRowNumber"), u = _("theme"), c = R([]), s = je(e), o = ze(e), { reRenderRef: d, replaceMermaid: b } = De(e), v = Fe({
    html: !0,
    breaks: !0
  });
  t(v, {
    editorId: i
  });
  const m = [
    {
      type: "katex",
      plugin: Qe,
      options: { katexRef: o }
    },
    {
      type: "image",
      plugin: xe,
      options: { figcaption: !0, classes: "md-zoom" }
    },
    {
      type: "admonition",
      plugin: Ye,
      options: {}
    },
    {
      type: "taskList",
      plugin: Me,
      options: {}
    },
    {
      type: "heading",
      plugin: tt,
      options: { mdHeadingId: e.mdHeadingId, headsRef: c }
    },
    {
      type: "codeTabs",
      plugin: ot,
      options: { editorId: i }
    }
  ];
  e.noMermaid || m.push({
    type: "mermaid",
    plugin: Ke,
    options: { themeRef: u }
  }), n(m, {
    editorId: i
  }).forEach((I) => {
    v.use(I.plugin, I.options);
  });
  const p = v.options.highlight;
  v.set({
    highlight: (I, $, L) => {
      if (p) {
        const N = p(I, $, L);
        if (N)
          return N;
      }
      let x;
      !e.noHighlight && s.value ? s.value.getLanguage($) ? x = s.value.highlight(I, {
        language: $,
        ignoreIllegals: !0
      }).value : x = s.value.highlightAuto(I).value : x = v.utils.escapeHtml(I);
      const fe = r ? Ce(x.replace(/^\n+|\n+$/g, "")) : `<span class="code-block">${x.replace(/^\n+|\n+$/g, "")}</span>`;
      return `<pre><code class="language-${$}" language=${$}>${fe}</code></pre>`;
    }
  }), rt(v);
  const f = R(`_article-key_${j()}`), k = R(e.sanitize(v.render(e.modelValue))), g = () => {
    y.emit(i, A, k.value), e.onHtmlChanged(k.value), e.onGetCatalog(c.value), y.emit(i, q, c.value), b();
  };
  P(g);
  const w = () => {
    c.value = [], k.value = e.sanitize(v.render(e.modelValue)), g();
  }, E = F(() => (e.noKatex || o.value) && (e.noHighlight || s.value));
  return C(
    [te(e, "modelValue"), E, d],
    ie(
      w,
      (l == null ? void 0 : l.renderDelay) !== void 0 ? l == null ? void 0 : l.renderDelay : a ? 0 : 500
    )
  ), P(() => {
    y.on(i, {
      name: Ie,
      callback() {
        y.emit(i, q, c.value);
      }
    }), y.on(i, {
      name: G,
      callback: () => {
        w(), f.value = `_article-key_${j()}`;
      }
    });
  }), { html: k, key: f };
}, lt = at, ce = {
  modelValue: {
    type: String,
    default: ""
  },
  setting: {
    type: Object,
    default: () => ({})
  },
  onHtmlChanged: {
    type: Function,
    default: () => {
    }
  },
  onGetCatalog: {
    type: Function,
    default: () => {
    }
  },
  mdHeadingId: {
    type: Function,
    default: () => ""
  },
  noMermaid: {
    type: Boolean,
    default: !1
  },
  sanitize: {
    type: Function,
    default: (e) => e
  },
  // 不使用该函数功能
  noKatex: {
    type: Boolean,
    default: !1
  },
  formatCopiedText: {
    type: Function,
    default: (e) => e
  },
  noHighlight: {
    type: Boolean,
    default: !1
  },
  previewOnly: {
    type: Boolean,
    default: !1
  },
  noImgZoomIn: {
    type: Boolean
  },
  sanitizeMermaid: {
    type: Function
  }
}, $t = {
  ...ce,
  onChange: {
    type: Function,
    default: () => {
    }
  },
  placeholder: {
    type: String,
    default: ""
  },
  scrollAuto: {
    type: Boolean
  },
  autofocus: {
    type: Boolean
  },
  disabled: {
    type: Boolean
  },
  readonly: {
    type: Boolean
  },
  maxlength: {
    type: Number
  },
  autoDetectCode: {
    type: Boolean
  },
  /**
   * 输入框失去焦点时触发事件
   */
  onBlur: {
    type: Function,
    default: () => {
    }
  },
  /**
   * 输入框获得焦点时触发事件
   */
  onFocus: {
    type: Function,
    default: () => {
    }
  },
  noPrettier: {
    type: Boolean
  },
  completions: {
    type: Array
  },
  catalogVisible: {
    type: Boolean
  },
  theme: {
    type: String,
    default: "light"
  },
  onInput: {
    type: Function
  },
  onDrop: {
    type: Function,
    default: () => {
    }
  },
  inputBoxWitdh: {
    type: String
  },
  onInputBoxWitdhChange: {
    type: Function
  }
}, it = /* @__PURE__ */ ne({
  name: "ContentPreview",
  props: ce,
  setup(e) {
    const a = _("editorId"), l = _("previewTheme"), t = _("showCodeRowNumber"), {
      html: n,
      key: i
    } = lt(e, e.previewOnly);
    return Oe(e, n, i), Be(e, n), () => M(pe, null, [M("div", {
      id: `${a}-preview-wrapper`,
      class: `${h}-preview-wrapper`,
      "data-show": e.setting.preview,
      key: "content-preview-wrapper"
    }, [M("div", {
      key: i.value,
      id: `${a}-preview`,
      class: [`${h}-preview`, `${l == null ? void 0 : l.value}-theme`, t && `${h}-scrn`],
      innerHTML: n.value
    }, null)]), !e.previewOnly && M("div", {
      id: `${a}-html-wrapper`,
      class: `${h}-preview-wrapper`,
      "data-show": e.setting.htmlPreview,
      key: "html-preview-wrapper"
    }, [M("div", {
      class: `${h}-html`
    }, [n.value])])]);
  }
}), Ct = (e, a) => {
  const { editorId: l } = e, t = oe({
    // 是否已编译成html
    buildFinished: !1,
    // 存储当前最新的html
    html: ""
  });
  C(
    () => e.modelValue,
    () => {
      t.buildFinished = !1;
    }
  ), P(() => {
    y.on(l, {
      name: A,
      callback(n) {
        t.buildFinished = !0, t.html = n;
      }
    }), y.on(l, {
      name: re,
      callback() {
        const n = new Promise((i) => {
          if (t.buildFinished)
            i(t.html);
          else {
            const r = (u) => {
              i(u), y.remove(l, A, r);
            };
            y.on(l, {
              name: A,
              callback: r
            });
          }
        });
        e.onSave ? e.onSave(e.modelValue, n) : a.emit("onSave", e.modelValue, n);
      }
    });
  });
}, se = (e) => {
  var n, i;
  const { editorId: a } = e, l = (i = (n = S) == null ? void 0 : n.editorExtensions) == null ? void 0 : i.highlight;
  H("editorId", a), H(
    "theme",
    F(() => e.theme)
  ), H(
    "language",
    F(() => e.language)
  ), H(
    "highlight",
    F(() => {
      const r = {
        ...V,
        ...l == null ? void 0 : l.css
      }, u = e.codeStyleReverse && e.codeStyleReverseList.includes(e.previewTheme) ? "dark" : e.theme;
      return {
        js: (l == null ? void 0 : l.js) || ye,
        css: r[e.codeTheme] ? r[e.codeTheme][u] : V.atom[u]
      };
    })
  ), H("showCodeRowNumber", e.showCodeRowNumber);
  const t = F(() => {
    var u, c;
    const r = {
      ...z,
      ...(c = (u = S) == null ? void 0 : u.editorConfig) == null ? void 0 : c.languageUserDefined
    };
    return r[e.language] ? r[e.language] : z["zh-CN"];
  });
  H("usedLanguageText", t), H(
    "previewTheme",
    F(() => e.previewTheme)
  ), H(
    "customIcon",
    F(() => e.customIcon)
  );
}, It = (e) => {
  se(e), H("tabWidth", e.tabWidth);
}, ue = (e) => {
  P(() => {
    var a, l;
    if (!e.noIconfont)
      if (S.iconfontType === "svg") {
        const t = document.createElement("script");
        t.src = ((a = S.editorExtensions) == null ? void 0 : a.iconfont) || ve, t.id = `${h}-icon`, T(t);
      } else {
        const t = document.createElement("link");
        t.rel = "stylesheet", t.href = ((l = S.editorExtensions) == null ? void 0 : l.iconfontClass) || be, t.id = `${h}-icon-class`, T(t);
      }
  });
}, St = (e) => {
  var u, c, s, o, d, b;
  const { noPrettier: a, noUploadImg: l } = e, { editorExtensions: t } = S, n = a || !!((c = (u = S.editorExtensions) == null ? void 0 : u.prettier) != null && c.prettierInstance), i = a || !!((o = (s = S.editorExtensions) == null ? void 0 : s.prettier) != null && o.parserMarkdownInstance), r = l || !!((b = (d = S.editorExtensions) == null ? void 0 : d.cropper) != null && b.instance);
  P(() => {
    var k, g, w, E;
    const v = document.createElement("script"), m = document.createElement("script");
    v.src = ((k = t == null ? void 0 : t.prettier) == null ? void 0 : k.standaloneJs) || W.main, v.id = `${h}-prettier`, m.src = ((g = t == null ? void 0 : t.prettier) == null ? void 0 : g.parserMarkdownJs) || W.markdown, m.id = `${h}-prettierMD`;
    const p = document.createElement("link");
    p.rel = "stylesheet", p.href = ((w = t == null ? void 0 : t.cropper) == null ? void 0 : w.css) || K.css, p.id = `${h}-cropperCss`;
    const f = document.createElement("script");
    f.src = ((E = t == null ? void 0 : t.cropper) == null ? void 0 : E.js) || K.js, f.id = `${h}-cropper`, r || (T(p), T(f)), n || T(v), i || T(m);
  }), ue(e);
}, Et = (e, a) => {
  const { editorId: l } = e;
  P(() => {
    y.on(l, {
      name: Se,
      callback: (t) => {
        e.onError instanceof Function ? e.onError(t) : a.emit("onError", t);
      }
    });
  });
}, Pt = (e, a) => {
  const { editorId: l } = e, t = oe({
    pageFullscreen: e.pageFullscreen,
    fullscreen: !1,
    preview: e.preview,
    htmlPreview: e.preview ? !1 : e.htmlPreview
  }), n = (u, c) => {
    t[u] = c === void 0 ? !t[u] : c, u === "preview" && t.preview ? t.htmlPreview = !1 : u === "htmlPreview" && t.htmlPreview && (t.preview = !1);
  };
  let i = "";
  const r = () => {
    t.pageFullscreen || t.fullscreen ? document.body.style.overflow = "hidden" : document.body.style.overflow = i;
  };
  return C(() => [t.pageFullscreen, t.fullscreen], r), P(() => {
    y.on(l, {
      name: Ee,
      callback(u, c) {
        const s = (o) => {
          y.emit(l, le, "image", {
            desc: "",
            urls: o
          }), c && c();
        };
        e.onUploadImg ? e.onUploadImg(u, s) : a.emit("onUploadImg", u, s);
      }
    }), i = document.body.style.overflow, r();
  }), [t, n];
}, _t = (e) => {
  const { editorId: a } = e, l = R(!1);
  return P(() => {
    y.on(a, {
      name: ae,
      callback: (n) => {
        n === void 0 ? l.value = !l.value : l.value = n;
      }
    });
  }), F(() => !e.toolbarsExclude.includes("catalog") && e.toolbars.includes("catalog") && l.value);
}, Tt = (e, a, l, t, n, i) => {
  const { editorId: r } = e;
  C(
    () => t.pageFullscreen,
    (c) => {
      y.emit(r, Z, c);
    }
  ), C(
    () => t.fullscreen,
    (c) => {
      y.emit(r, J, c);
    }
  ), C(
    () => t.preview,
    (c) => {
      y.emit(r, Q, c);
    }
  ), C(
    () => t.htmlPreview,
    (c) => {
      y.emit(r, X, c);
    }
  ), C(l, (c) => {
    y.emit(r, Y, c);
  });
  const u = {
    on(c, s) {
      switch (c) {
        case "pageFullscreen": {
          y.on(r, {
            name: Z,
            callback(o) {
              s(o);
            }
          });
          break;
        }
        case "fullscreen": {
          y.on(r, {
            name: J,
            callback(o) {
              s(o);
            }
          });
          break;
        }
        case "preview": {
          y.on(r, {
            name: Q,
            callback(o) {
              s(o);
            }
          });
          break;
        }
        case "htmlPreview": {
          y.on(r, {
            name: X,
            callback(o) {
              s(o);
            }
          });
          break;
        }
        case "catalog": {
          y.on(r, {
            name: Y,
            callback(o) {
              s(o);
            }
          });
          break;
        }
      }
    },
    togglePageFullscreen(c) {
      n("pageFullscreen", c);
    },
    toggleFullscreen(c) {
      y.emit(r, Pe, c);
    },
    togglePreview(c) {
      n("preview", c);
    },
    toggleHtmlPreview(c) {
      n("htmlPreview", c);
    },
    toggleCatalog(c) {
      y.emit(r, ae, c);
    },
    triggerSave() {
      y.emit(r, re);
    },
    insert(c) {
      y.emit(r, le, "universal", { generate: c });
    },
    focus(c) {
      var s;
      (s = i.value) == null || s.focus(c);
    },
    rerender() {
      y.emit(r, G);
    },
    getSelectedText() {
      var c;
      return (c = i.value) == null ? void 0 : c.getSelectedText();
    },
    resetHistory() {
      var c;
      (c = i.value) == null || c.resetHistory();
    }
  };
  a.expose(u);
}, ct = (e) => e, de = {
  /**
   * markdown content.
   *
   * @default ''
   */
  modelValue: {
    type: String,
    default: ""
  },
  /**
   * 主题，支持light和dark
   *
   * @default 'light'
   */
  theme: {
    type: String,
    default: "light"
  },
  /**
   * 外层类名
   *
   * @default ''
   */
  class: {
    type: String,
    default: ""
  },
  /**
   * 预设语言名称
   *
   * @default 'zh-CN'
   */
  language: {
    type: String,
    default: "zh-CN"
  },
  /**
   * html变化事件
   */
  onHtmlChanged: {
    type: Function
  },
  /**
   * 获取目录结构
   */
  onGetCatalog: {
    type: Function
  },
  /**
   * 编辑器唯一标识
   *
   * @default 'md-editor-v3'
   */
  editorId: {
    type: String,
    default: we
  },
  /**
   * 预览中代码是否显示行号
   *
   * @default false
   */
  showCodeRowNumber: {
    type: Boolean,
    default: !1
  },
  /**
   * 预览内容样式
   *
   * @default 'default'
   */
  previewTheme: {
    type: String,
    default: "default"
  },
  /**
   * 编辑器样式
   */
  style: {
    type: Object,
    default: () => ({})
  },
  /**
   * 标题的id生成方式
   *
   * @default (text: string) => text
   */
  mdHeadingId: {
    type: Function,
    default: ct
  },
  /**
   *
   * 不能保证文本正确的情况，在marked编译md文本后通过该方法处理
   * 推荐DOMPurify、sanitize-html
   *
   * @default (text: string) => text
   */
  sanitize: {
    type: Function,
    default: (e) => e
  },
  /**
   * 不使用该mermaid
   *
   * @default false
   */
  noMermaid: {
    type: Boolean,
    default: !1
  },
  /**
   * 不使用katex
   *
   * @default false
   */
  noKatex: {
    type: Boolean,
    default: !1
  },
  /**
   * 代码主题
   *
   * @default 'atom'
   */
  codeTheme: {
    type: String,
    default: "atom"
  },
  /**
   * 不插入iconfont链接
   *
   * @default false
   */
  noIconfont: {
    type: Boolean
  },
  /**
   * 复制代码格式化方法
   *
   * @default (text) => text
   */
  formatCopiedText: {
    type: Function,
    default: (e) => e
  },
  /**
   * 某些预览主题的代码模块背景是暗色系
   * 将这个属性设置为true，会自动在该主题下的light模式下使用暗色系的代码风格
   *
   * @default true
   */
  codeStyleReverse: {
    type: Boolean,
    default: !0
  },
  /**
   * 需要自动调整的预览主题
   *
   * @default ['default', 'mk-cute']
   */
  codeStyleReverseList: {
    type: Array,
    default: ["default", "mk-cute"]
  },
  noHighlight: {
    type: Boolean,
    default: !1
  },
  /**
   * 是否关闭编辑器默认的放大缩小功能
   */
  noImgZoomIn: {
    type: Boolean,
    default: !1
  },
  /**
   * 自定义的图标
   */
  customIcon: {
    type: Object,
    default: {}
  },
  sanitizeMermaid: {
    type: Function,
    default: (e) => Promise.resolve(e)
  }
}, Ht = {
  ...de,
  /**
   * input回调事件
   */
  onChange: {
    type: Function
  },
  /**
   * input回调事件
   */
  onSave: {
    type: Function
  },
  /**
   * 上传图片事件
   */
  onUploadImg: {
    type: Function
  },
  /**
   * 是否页面内全屏
   *
   * @default false
   */
  pageFullscreen: {
    type: Boolean,
    default: !1
  },
  /**
   * 是否展开预览
   *
   * @default true
   */
  preview: {
    type: Boolean,
    default: !0
  },
  /**
   * 是否展开html预览
   *
   * @default false
   */
  htmlPreview: {
    type: Boolean,
    default: !1
  },
  /**
   * 仅预览模式，不显示toolbar和编辑框
   *
   * @4.0.0开始移除该设置，使用组件MdPreview替换
   *
   * @default false
   */
  // previewOnly: {
  //   type: Boolean as PropType<boolean>,
  //   default: false
  // },
  /**
   * 工具栏选择显示
   *
   * @default allToolbar
   */
  toolbars: {
    type: Array,
    default: ke
  },
  /**
   * 工具栏选择不显示
   *
   * @default []
   */
  toolbarsExclude: {
    type: Array,
    default: []
  },
  /**
   * 格式化md
   *
   * @default true
   */
  noPrettier: {
    type: Boolean,
    default: !1
  },
  /**
   * 一个tab等于空格数
   *
   * @default 2
   */
  tabWidth: {
    type: Number,
    default: 2
  },
  /**
   * 表格预设格子数
   *
   * @default [6, 4]
   */
  tableShape: {
    type: Array,
    default: () => [6, 4]
  },
  /**
   * 空提示
   *
   * @default ''
   */
  placeholder: {
    type: String,
    default: ""
  },
  /**
   * 自定义的工具栏列表
   */
  defToolbars: {
    type: [String, Object]
  },
  /**
   * 内部错误捕获
   */
  onError: {
    type: Function
  },
  /**
   * 页脚列表显示顺序
   */
  footers: {
    type: Array,
    default: $e
  },
  /**
   * 是否默认激活输入框和预览框同步滚动
   *
   * @default true
   */
  scrollAuto: {
    type: Boolean,
    default: !0
  },
  /**
   * 自定义的也叫工具组件列表
   */
  defFooters: {
    type: [String, Object]
  },
  /**
   * 是否禁用上传图片
   *
   * @default false
   */
  noUploadImg: {
    type: Boolean
  },
  /**
   * 文本区域自动获得焦点
   *
   * @default false
   */
  autoFocus: {
    type: Boolean
  },
  /**
   * 禁用文本区域
   *
   * @default false
   */
  disabled: {
    type: Boolean
  },
  /**
   * 文本区域为只读
   *
   * @default false
   */
  readOnly: {
    type: Boolean
  },
  /**
   * 文本区域允许的最大字符数
   */
  maxLength: {
    type: Number
  },
  /**
   * 是否启用自动识别粘贴代码类别
   * 目前支持 vscode 复制的代码识别
   *
   * @default false
   */
  autoDetectCode: {
    type: Boolean
  },
  /**
   * 输入框失去焦点时触发事件
   */
  onBlur: {
    type: Function
  },
  /**
   * 输入框获得焦点时触发事件
   */
  onFocus: {
    type: Function
  },
  /**
   * @codemirror/autocomplete匹配关键词的方法列表
   *
   * 它会被像下面这样嵌入编辑器
   *
   * import { autocompletion } from '@codemirror/autocomplete';
   * autocompletion({
   *   override: [...completions]
   * })
   */
  completions: {
    type: Array
  },
  /**
   * 是否在工具栏下面显示对应的文字名称
   *
   * @default false
   */
  showToolbarName: {
    type: Boolean,
    default: !1
  },
  /**
   * 字符输入事件
   */
  onInput: {
    type: Function
  },
  onDrop: {
    type: Function
  },
  /**
   * 输入框的默认宽度
   *
   * @example '100px'/'50%'
   * @default '50%
   */
  inputBoxWitdh: {
    type: String,
    default: "50%"
  },
  /**
   * 输入框宽度变化事件
   */
  onInputBoxWitdhChange: {
    type: Function
  }
}, me = ["onHtmlChanged", "onGetCatalog"], Ft = [
  ...me,
  "onChange",
  "onSave",
  "onUploadImg",
  "onError",
  "update:modelValue",
  "onBlur",
  "onFocus",
  "onInput",
  "onDrop",
  "onInputBoxWitdhChange"
], st = (e, a) => {
  const { editorId: l } = e, t = {
    rerender() {
      y.emit(l, G);
    }
  };
  a.expose(t);
}, ut = /* @__PURE__ */ ne({
  name: "MdPreview",
  props: de,
  emits: me,
  setup(e, a) {
    const {
      editorId: l,
      noKatex: t,
      noMermaid: n,
      noHighlight: i
    } = e;
    return se(e), ue(e), st(e, a), he(() => {
      y.clear(l);
    }), () => M("div", {
      id: l,
      class: [h, e.class, e.theme === "dark" && `${h}-dark`, `${h}-previewOnly`],
      style: e.style
    }, [M(it, {
      modelValue: e.modelValue,
      onHtmlChanged: (r) => {
        e.onHtmlChanged ? e.onHtmlChanged(r) : a.emit("onHtmlChanged", r);
      },
      onGetCatalog: (r) => {
        e.onGetCatalog ? e.onGetCatalog(r) : a.emit("onGetCatalog", r);
      },
      mdHeadingId: e.mdHeadingId,
      noMermaid: n,
      sanitize: e.sanitize,
      noKatex: t,
      formatCopiedText: e.formatCopiedText,
      noHighlight: i,
      noImgZoomIn: e.noImgZoomIn,
      previewOnly: !0,
      sanitizeMermaid: e.sanitizeMermaid
    }, null)]);
  }
}), O = ut;
O.install = (e) => (e.component(O.name, O), e);
export {
  it as C,
  O as M,
  Ft as a,
  It as b,
  $t as c,
  St as d,
  Ht as e,
  Et as f,
  Pt as g,
  _t as h,
  Tt as i,
  Ct as u
};
